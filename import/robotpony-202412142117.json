{"username":"robotpony","has_pass":false,"email":"bruce.alderson@gmail.com","created":"2022-02-15T00:18:49Z","status":null,"subscription":null,"collections":[{"alias":"robotpony","title":"robotpony","description":"","style_sheet":"","public":false,"views":0,"url":"https://write.as/robotpony/","monetization_pointer":"","verification_link":"","total_posts":0,"posts":[]},{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":53,"posts":[{"id":"bvrq7h9pcj1p5w6y","slug":"the-things-we-dont-say-out-loud","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2024-03-29T21:27:07Z","updated":"2024-03-29T21:27:07Z","title":"The things we don't say out loud","body":"There is a point in your career where you start to weigh what you want to say with what you can and should say. If you’re not careful, it can paralyze and stunt your ability to hold opinions with conviction. I suspect that the difference between our inner voice and where it comes from, versus what we know we should sound like, is one of the primary causes of imposter syndrome, and possibly contributes to a cycle of burnout. I find the more disconnected my inner voice is from my external persona (and the longer there is dissonance), the less I feel like myself.\n\nWriting is how I weave my inner voice with my person, but it takes a bunch of effort to reach escape velocity. It’s easy to start writing, but difficult to finish and publish essays as it forces me to resolve the noise in my mind. The negative voice of imposter syndrome and self-esteem is part of it, and both are imaginary and self-imposed. I know all I need to do is write and iterate, and that eventually my ideas will find a shape that fit both my internal and external self, but knowing and doing are vastly different things. It takes time and effort to get from one to the other.\n\n## Getting unstuck\n\nI like to look for inspiration when my brain gets in the way. When it comes to writing, Anthony Bourdain is my gold standard: his work feels more like an inner monologue than purely a facade. Even Bourdain claimed to struggle to be his persona, but the writing and film he left behind is a fantastic body of unabashed, honest (feeling), and deeply interesting experiences. He was a great writer and filmmaker, and he had a voice that will stick with me forever. \n\nMy inner voice isn’t a lot different than Bourdain’s: it’s rough around the edges, it’s cynical, sarcastic, and it reflects my modest, rural childhood, and the negative experiences common to it. When I was younger, I would lean on those rough edges, writing and speaking with conviction. That honesty has become more difficult for me over the years.\n\nI believe that strong convictions are a good thing, but that they are also biased and distracting from reality. I’ve learned that convictions need to be loosely held, though not so loosely that they become meaningless. Thinking about those subtle balances makes resolving the difference between my inner voice and desired persona is unsettling. It is too easy to overthink things and get stuck in the mire of self-loathing and meaningless, garbage writing. \n\n## Taking the best of who we are\n\nMy inner voice also has an optimistic and hopeful twang to it, a bit of that rural, child-like thinking where anything is possible, and if it’s nifty or cool that it’s something worth doing. I’ll call this voice [Kenneth](https://en.wikipedia.org/wiki/Kenneth_Parcell \"Kenneth\"). I’m less proud of the twang, but I adore the shiny optimism. Optimism is a great fuel for creativity and seeing through complexity. Twang, unfortunately, reminds me of a culture that resists rationality and fact, which I’ve always found alienating.\n\nI have always aimed my external persona to rational, interesting, and creative voices. [Paul Graham](https://paulgraham.com/articles.html \"Paul Graham\") is one of those writers that blends a straightforward style, with rational thought and punchy writing. I’ve also always enjoyed reading (or hearing) Carmack’s takes on technology, which are pragmatic and biased towards thinking in terms of tradeoffs. \n\nSo I have this soup of Kenneth and Tony driving my inner self, and pragmatists like Graham and Carmack driving my desired self. I am happy with my writing when I’m able to find a voice somewhere between those inspirations, while avoiding the quieter nagging of self-loathing and doubt. \n\nIn the end, I do think that the ensemble of experiences and inspirations make us who we are, especially when we take the best bits of each. And it’s worth reminding ourselves that writing paralysis is a self-imposed problem that is a lot like falling off of a bike or board: getting stuck is just inaction. If you keep trying and are open to learning, you might get it right.\n\nIt’s also worth remembering that the great voices we look up to are all flawed, and that the quirks often make up the best parts of who those people are.","tags":[],"paid":false,"full_post_url":"","views":20,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"s86clq20d0zfeuqy","slug":"imposter-syndrome-is-real","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2022-05-18T04:15:56Z","updated":"2022-12-07T00:40:09Z","title":"Imposter syndrome is real","body":"I have a reminder on my TODO list that haunts me weekly:\n\n\u003e Problem: I’m not writing.\n\nSometimes I snooze it, sometimes I check it off. Sometimes I start to draft something and then lose interest. I leave the task on the list as I really should be writing more.\n\nThere are a bunch of things getting in my way, but honestly I haven’t felt like myself for a few years. Working from home during lockdown was draining, and work itself is challenging enough that I don’t have much left at the end of the day.  Even my non-work life has thrown a few curveballs. The most frustrating thing, however, is that I have been struggling with imposter syndrome. I feel like I don't deserve to write.\n\nThe first time I heard the term [imposter syndrome](https://en.wikipedia.org/wiki/Impostor_syndrome) was only a few years ago. It was around the time I started to focus more time managing engineers and less on system design and coding. I’m a good people manager and I’ve led many teams through many releases, but my core skills have always been in software. When switching to engineering management and product management I started to feel less confident.\n\nSoftware is much more predictable than people stuff. I like that it’s easy to see immediate results with software, and it’s easy to prove out approaches using facts, maths, and code. I also just love the process of designing and building software. It’s been a dream of mine since I was a kid.\n\nManaging people, on the other hand, is much less predictable. It takes longer to see results. People and processes are more difficult to measure. And at the end of the day, managing people is another level of abstraction away from making software. There are many parts of managing people I enjoy, especially when I can clear distractions, advocate for people struggling to make changes happen, and help people learn and grow.\n\nI shifted over to product management last summer. It’s a lot closer to building software, and I can apply my experience of system and design to bridge product thinking and engineering. I feel far more productive and my confidence has improved.\n\nBut I’m still not writing.\n\nWell, that’s not entirely true, the problem is that I’m not publishing. I have dozens of essays started that I either lost interest in or wasn’t happy with. I have also been noodling on a number of product ideas, specs, and logs. I enjoy that writing, but I haven’t felt like any of it was worth publishing. Again, there are a number of reasons I haven’t liked anything I’ve written, but at the root of it is that I haven’t been writing about what I love. My writing hasn’t sounded like me for a while. Somehow I lost my voice.\n\nEarlier this year I moved my site from one service to another. As part of the process I reread every essay I had published in the last 20+ years. I liked some of what I saw, but there was a lot of it I wasn’t proud of. Some of it was rushed, some was arrogant, and some was just outdated. It felt good to pare down my essays to my favourites, but it left me with a lingering feeling that maybe I shouldn’t be publishing my stuff. I mean, what the heck do I know?\n\nAnd that’s imposter syndrome in a nutshell. For me it feels that I’m not as good at what I love to do as I thought I was. It feels like impending failure. It’s watching my confidence slowly ebb away, which feeds back into how I perceive myself. The effect is amplified by working remotely, watching myself on Zoom calls while I lead teams through sprints and projects. There are very few things as demotivating than watching yourself, feeling awkward, and watching yourself become more awkward.\n\nEvery once in a while I am lucky enough to be reminded that I am not a failure. I use these reminders to reset my perspective. I try to also remember that most people will feel imposter syndrome at some point, and that encouraging and reminding others that they are fantastic is a great way to lead.\n","tags":[],"paid":false,"full_post_url":"","views":764,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"bxe7geczpig9u5yo","slug":"how-we-write-headlines-is-changing","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2022-02-27T00:19:44Z","updated":"2022-03-01T00:34:26Z","title":"How we write headlines is changing","body":"I find trends in style guidelines interesting, especially when shared style guides lag language usage in the wild. I have observed a shift in headline style from _Title Case_ to _Sentence case_ in the majority of commercial publications online. I've also found a general improvement in clarity from the most reliable publishers, mostly due to well understood in house style guidelines.\n\n## Common headline formats\n\nThere are for general formats used for headlines today, with some publications using multiple methods depending on the feed source.\n\n1. \"Sentence case\" is used in most established online publications in 2022.\n2. \"Title Case\" Lags in Usage\n3. \"Start Case,\" Or Tabloid Case, Also Lags In Usage\n4. \"ALL CAPS,\" THANKFULLY ALSO LAGS IN USAGE\"\n\n![Headline case sample, February 2022](https://images.warpedvisions.org/2022/02/headline-case-styles-2022.png)\n\n_Chart tracking top 25 publications in US, Canada, and the UK._\n\nSurprisingly, a small number of top publications use multiple formats for headlines. This is likely due to differing requirements by different news engines and stylistic choices between different levels of design hierarchy.\n\nOther types of [letter case](https://en.wikipedia.org/wiki/Letter_case) were not in use in any of the sampled publications.\n\n## Does letter case even matter?\n\nThe way that text is formatted changes how we read it, even if subtly. It hints at what is important, what isn't, and the way the words play back in our brains. It can speed up or slow down our comprehension, and even give a phrase a sense of style.\n\nFor example: I read different types of headlines in my head using different voices, which for me hint at an increasing level of ridiculousness:\n\n1. Sentence case: a conversational summary, the way that a Dan Rather might preface a story with.\n2. Title Case: starts to sound like a 1950s radio or film announcer reading a headline. I imagine J. K. Simmons (from Spiderman) reading these, or the more classic David Kaye (from Disney's UP) reading as a Newsreel announcer. This one feels _fun_.\n3. Start Case: progresses towards a 1950s newsie hawking daily papers on the street corner.\n4. ALL CAPS: is the full-on satirical version of 3 that is loud and abrasive, unless the font size is toned down.\n\nThere are legitimate uses for each style, from portraying a serious tone, to adding emphasis, and then towards the less serious satirical style used by many tabloids. The texture of how we break down headlines is affected by the case, punctuation, and language too.  These are interesting design tradeoffs we can consider when defining a brand or publication style.\n\n## Deviation from the AP and other traditional guides\n\nThere is a difference between the more traditional style guides and what we're seeing online in 2022. The divide trends towards more clarity and less hyperbole to reinforce trust in a a publication. I suspect that at least part of the motivation is that _Sentence case_ is simpler to write in an online world, requiring significantly less training and editorial time. I also believe that, generally, _Sentence case_ is easier to scan quickly.\n\nIt's important to remember that there are [many language style guides](https://en.wikipedia.org/wiki/Style_guide) (at the time of writing, this list is missing the [CP guide](http://www.davidmckie.com/Canadian%20Press%20Style%20Guide%20Excerpts.pdf)). Guidelines help define a voice for various types of publications, and those differing voices are important.\n\nThe Associated Press continues to recommend the long running standard _Title Case_ for headlines:\n\n\u003e In AP style, headlines capitalize the first word, proper names, or proper abbreviations, verbs, pronouns, adjectives, and adverbs. ([source](https://writer.com/blog/a-comprehensive-guide-to-the-ap-style-of-writing/))\n\nThe Chicago Manual of Style also continues to recommend a variant of _Title Case_ (though their standard is behind a paywall). \n\nCanadian and British styles differ from the classic US styles, mostly focusing on _Sentence case_ (in both the [CP](http://www.davidmckie.com/Canadian%20Press%20Style%20Guide%20Excerpts.pdf) and [OED](https://www.ox.ac.uk/sites/files/oxford/Style%20Guide%20HT2016.pdf)), which explains my strong bias towards it. The muted style reads evenly, and the gradients of choppiness in the more capitalized formats starts to feel less balanced as it graduates to ALL CAPS.\n\nI find that switching case mid-thought delays how we parse phrases as we read. That flow is important to how we perceive meaning. Letter case, combined with language and punctuation affects how we perceive the summary intent of a headline. Balancing these carefully and intentionally is an important part of any brand or publication feel.\n\n## Headlines are the tip of the iceberg\n\nAs you dive into the various style guides, the devil is certainly in the details. A cheatsheet for the [Canadian Press Stylebook](https://newcanadianmedia.ca/wp-content/uploads/2021/05/The-Canadian-Press-Stylebook_-Cheat-sheet-for-NCM-writers-1.pdf) lists various correct and incorrect word usages, spellings, and letter case. Each style guideline has a long list of exceptions and special cases, and editors spend many years becoming intimately familiar with their brand's feel and flair.\n\nI find the rules around human language fascinating. We're transporting thoughts between humans with varying efficiency and purpose. We have the ability to play with the various toggles and levers to accomplish this teleportation of thought. It's absolutely magical ✨.\n\n\n\n\n\n\n\n","tags":[],"images":["https://images.warpedvisions.org/2022/02/headline-case-styles-2022.png"],"paid":false,"full_post_url":"","views":1019,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"i0ry4stec4s19z9v","slug":"warped-evolution-40","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2022-02-19T03:54:06Z","updated":"2022-02-19T03:57:37Z","title":"Warped evolution 40","body":"This is the 40th evolution of [warpedvisions.org](https://warpedvisions.org). It's now running on [WriteFreely](https://github.com/writefreely/writefreely),  hosted by [Write.as](https://write.as). WriteFreely is a minimalist writing platform built on Go, LESS, and plain old vanilla Javascript. It's a speedy platform that feels nice to write in.\n\nThis is also the 40th Warped theme. Not all 40 versions made the light of day, mind you, but I've hacked together all of these themes as a sort of playground of tech and design approaches. The process of building out a theme for a platform tells you a lot about the platform.\n\nIt turns out that the process of designing a theme for a site forces you to think about what you're trying to say and how you want to be seen. I decided that I needed a place to write that didn't get in my way, presented simply and clearly.\n\nThe theme is based it on my previous (and ageing) WP theme. I dialled back the colours and complexity a bit so that it fit better with the platform, and dropped the Google web fonts to promote better privacy (and because I was being lazy). The process forced me to relearn vanilla JS, and I ported a few simple helpers from my old sites as part of the process.\n\n## About WriteFreely and Write.as\n\nI immediately liked the writing interface. It's minimal and in Markdown (optionally at least). The app stays out of your way, while allowing some basic CSS and Javascript theming. Write.as allows you to host 3 sites at the Pro level, and offers domain name mapping, basic pages, tags, and some publishing mojo.\n\nThe entire import and build took me about a week of evenings, maybe 10 hours to import the top 60 or so posts from my old site and set up a new theme. The process was as simple as exporting WordPress posts as text, reformatting as proper Markdown, and pasting them in by hand. It is possible to script the upload using [their CLI tool](https://write.as/apps/cli), but I wanted to review each article I added so I could fix the formatting and adjust the site CSS.\n\nI did end up having to script some Markdown cleanup as the combination of 17 generations of WordPress posts and [Pandoc](https://pandoc.org/) produced some funky Markdown. The biggest issues were around wrapped lines, extra image tag formatting, and indentation that didn't work well with Write.as. Most of these were repairable with simple regex substitutions, but a few had to be fixed by hand.\n\n## What's next for Warped?\n\nI haven't written much over the past few years. Most of this was the shift to working from home, and some of it was related to starting a new job and building out a new business unit.\n\nI've been itching to write and find my voice again, but WordPress was getting in my way as I just want to write. The last straw was a botched WordPress upgrade that required fixing some old plugins, realizing my theme needed work to support current WordPress tooling, and the general annoyance of how unproductive writing in WordPress is for me.\n\n\n\n","tags":[],"categories":[{"hashtag":"lockdown","slug":"lockdown","title":"lockdown","post_count":0}],"paid":false,"full_post_url":"","views":931,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"4k0ol48bbxknqdra","slug":"pico-8-tile-art-tests","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2022-02-18T00:43:34Z","updated":"2022-02-19T00:04:16Z","title":"PICO-8 tile art tests","body":"I've been playing around in [PICO-8](https://www.lexaloffle.com/pico-8.php), working on some generative art ideas. Lua is a fun little language that feels a lot like something between BASIC and JavaScript. Lua isn't my favourite language, but it's fun at the small scale. PICO-8, however, is a fantastic little game engine (or \"Fantasy Console\") that has all of the feels of the 80s.\n\n## First tests\n\nI started with a Minecraft style terrain generator, but as 2D tyles:\n\n\u003cvideo controls width=\"256\"\u003e\n    \u003csource src=\"https://images.warpedvisions.org/2022/02/terrain-gen-test-14.mp4\"\u003e\n    Sorry, your browser doesn't support embedded videos.\n\u003c/video\u003e\n\nIt was a fun attempt and performed reasonably well that I filed away under _maybe later_.\n\nMy second attempt was a stamp generation tool, that defines some simple verbs and nouns for generating art, and applies it to coloured tiles:\n\n\u003cvideo controls width=\"75%\"\u003e\n    \u003csource src=\"https://images.warpedvisions.org/2022/02/tile-gen-test-1.mp4\"\u003e\n    Sorry, your browser doesn't support embedded videos.\n\u003c/video\u003e\n\nThe third test evolves on the previous and improves the performance significantly:\n\n\u003cvideo controls width=\"75%\"\u003e\n    \u003csource src=\"https://images.warpedvisions.org/2022/02/tile-stamper-test-2.mp4\"\u003e\n    Sorry, your browser doesn't support embedded videos.\n\u003c/video\u003e\n\nI'm working on taking the basic concepts from these tests and building a Swift/iOS version that adds some interactivity. We'll see how that goes!\n\n#pico8 #weblog","tags":["pico8","weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0},{"hashtag":"pico8","slug":"pico8","title":"pico8","post_count":0}],"paid":false,"full_post_url":"","views":912,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"psxi6s2sa9ut8cf3","slug":"playing-with-the-pico-8-fantasy-console","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2021-04-25T22:37:43Z","updated":"2022-02-19T02:46:51Z","title":"Playing with the Pico-8 fantasy console","body":"I've been using [Pico-8](https://www.lexaloffle.com/pico-8.php) as a virtual playground for playing with generative art ideas. Pico-8 is a highly constrained virtual machine that behaves a lot like a personal computer from the 1980s. It has a fixed colour palette, limited memory, limited screen size, and a simplified programming model using Lua. The constraints make it a great place to scale down ideas and quickly finish demos and prototypes.\n\nThis week I'm toying with generative art ideas, starting with a tool that stamps the screen in various patterns. I'm hoping to evolve [these prototypes](https://github.com/robotpony/pico8-playground/tree/main/tileart) into a general plotter library, but for now I'm focused on making things that look cool, as a way to play in generative code again.\n\nOne of my demos this week is a GTIA style plotter that simulates a weird 80s graphic chip that drew wide pixels, but coloured in a way that produces some fun random patterns: \n\n![Drawing test\" width=\"100%](https://images.warpedvisions.org/2021/03/gtia-tiles.png)\n\n#pico8\n","tags":["pico8"],"categories":[{"hashtag":"pico8","slug":"pico8","title":"pico8","post_count":0}],"images":["https://images.warpedvisions.org/2021/03/gtia-tiles.png"],"paid":false,"full_post_url":"","views":1034,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"anm4ysjkpk2mfger","slug":"good-ideas-arent-always-great","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2021-04-17T23:26:13Z","updated":"2022-02-18T00:26:52Z","title":"💡Good ideas aren't always great","body":"One of my art projects last year was an attempt at nerdy art in a retro [PCB](https://en.wikipedia.org/wiki/Printed_circuit_board) style:\n\n![](https://images.warpedvisions.org/2021/04/2600-cart-BW.png)\n\nThe idea was to use traces and board shapes to make something fun. After some hours of sketching and vector work I liked the results, but found that the general look isn't as interesting as I thought it could be. That's how art goes sometimes; idea, reasonable execution, and fizzle fizzle. And that's okay.\n\n#Art\n","tags":["Art"],"categories":[{"hashtag":"Art","slug":"art","title":"art","post_count":0}],"images":["https://images.warpedvisions.org/2021/04/2600-cart-BW.png"],"paid":false,"full_post_url":"","views":736,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"d7fo1gej4wjsrwc3","slug":"using-fonts-with-ligatures-to-improve-readability","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2021-03-01T00:22:52Z","updated":"2022-02-18T00:23:23Z","title":"Using fonts with ligatures to improve readability","body":"I set up a new dev laptop for myself over the Christmas holidays. I took the opportunity to burn down my old environment and to survey the 2021 tool landscape, which included testing out various terminals and setups, editors, and fonts. This year I discovered [Fira Code](https://github.com/tonsky/FiraCode), a tidy little monospace font that supports ligatures.\n\nLigatures are two or more letters (or graphemes) that can be combined to make a single glyph. The result of combining letters into these ligatures can make complex syntax a bit easier to read, especially if you are familiar with the notations the concepts are based on.\n\n![Fira Code in Nova](https://images.warpedvisions.org/2021/02/Screen-Shot-2021-02-28-at-12.57.28-PM.png \"Fira Code\")\n\nFira Code has [installation instructions](https://github.com/tonsky/FiraCode/wiki/Installing) for most platforms, though be aware that most editors have additional requirements to enable the automatic display of ligatures.\n\n#Weblog\n","tags":["Weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0}],"images":["https://images.warpedvisions.org/2021/02/Screen-Shot-2021-02-28-at-12.57.28-PM.png"],"paid":false,"full_post_url":"","views":855,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"25mi8m419gjmwfix","slug":"a-media-diet-for-the-crazy-years-2019-2020","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2020-06-01T21:59:05Z","updated":"2022-02-23T17:59:44Z","title":"A media diet for the crazy years","body":"In the last year I read a lot less than normal, while at the same time I watched more streaming shows than I’m used to. I’ve been busier with work, in addition to what’s shaping up to be a crazy year. Stress and burnout kill my ability to focus on long form reading, which is something I’m working hard to counteract. Sometimes just forcing myself to read a book is the best medicine imaginable.\n\n----\n\n*Books and other things in print.* I am finding a groove of reading that embraces what’s available on the web and in electronic books. I used to feel weird about reading online, but now I see the huge value in small scale publishing. For example, there are veins of [computing history on the web](https://fabiensanglard.net/another_world_polygons_atariST/index.html), where you can get lost for hours. Writing like this exists all over the web, and has all the feels of losing yourself for days in your local library.\n\nI spent several weekends reading my way through my stack of Oliver Sacks books, including _Hallucinations_, _The Mind’s Eye_, and the classic _The Man who Mistook his Wife for a Hat_. I love reading about the brain, as it gets me thinking about how our thinking can fail us even in the best of conditions. It’s humbling to think about how our brain can break down.\n\nI also read a book of stories about addiction (_In the Realm of Hungry Ghosts: Close Encounters with Addiction_) by local author Gabor Maté MD. I once met Dr. Maté on the downtown East side and have always been in awe of (and fascinated) by his work.\n\nA friend gave me a copy of _Masters of Doom_, which I read over a weekend this Spring. The story of iD Software always inspires me to think about engine design. The tale of how Carmack and Romero escaped their humble origins maps closely to my own, which triggered a good deal of important and healthy introspection and nostalgia for me.\n\nI read my way through several cookbooks this year, including _Hamburger America_, a compendium of classic American burgers. This is one of those books (and YouTube series) that changed how I think about a thing, as it turns out you can make great burgers using pretty much every cooking technique imaginable (i.e., there really is no single best way). I still prefer a good smash burger, but now have mad respect for pretty much any well considered approach to burger design. And yes, I do consider creating burgers a design problem.\n\nI also read through Kenji’s _The Food Lab_. Read this book if it’s the only cookbook you’ll ever read. It uses science, experimentation, and good taste to put together a way to think about food. To me, it’s the distillation of all of the last few decades of chefs, and easily one of the most important books of my lifetime (thanks Kenji!). This book pairs well with a good IPA and both _Ugly Delicious_ (David Chang) and _The Chef Show_ (Favreau/Choi). These two food shows are also the best things to come out of this strange era.\n\nI did re-read a few novels over the last 18 months, but nothing really stands out. I don’t really get into novels when I’m busy, which is on my list to improve over the next few years.\n\n----\n\n*Essays and long reads.* I read a lot more online this year. The web has hit a critical mass of great (but hard to find) writing, as well as an unfortunate pinnacle of garbage advertising and signup forms. I work past the absurdity of online advertising by using Instapaper. You can see what I’m reading [here](https://www.instapaper.com/p/robotpony).\n\nOne essay that stood out last year was [The Sinking of the Leviathan II](https://www.macleans.ca/sinking-of-leviathan-ii/), the story of a passenger vessel that sank off the coast of Tofino B.C. (a local fishing/vacation town). It’s one of those essays that will make you cry, so be warned.\n\nThere are hundreds of other essays that filled my year. I’m thankful for all of the crazy folks who take the time to write and publish online, even more so those who do so without ruining their sites with aggressive advertising.\n\n----\n\n*Streaming movies and series.* 2019 and 2020 have been the year of streaming for us here. There have been dozens of fantastic fictional and non-fictional adventures to explore during lockdown and our long Vancouver winters. I am thankful for all of it, and am amazed at the amount of effort humanity pours into the whole process of taking our minds on adventures.\n\nA few things stand out for me:\n\n- _Tales from the Loop_ (Amazon Prime) was filmed in Winnipeg and was our daughter’s first experience as a DIT. We watched in a few days, as any proud parents would. It’s at least a 6/10 (if not 7). It’s dark, weird, and filmed in a way that feels interesting.\n- _WestWorld_ season 3 was just perfect. Somewhere between season 1 and the Matrix.\n- _The Great British Bake-off_ was a bright light in this year of weird presidents and lockdown. People helping each other, creating things, and enjoying the process of learning together. The Canadian version was also pretty fantastic.\n- _JoJo Rabbit_ was the weirdest, most uncomfortable, and funny thing I’ve seen in a long time. It took me a while to figure out if it was okay to laugh at Nazi jokes yet, but I think this one got the balance right. Absurdity sometimes deserves a poignant jab or two.\n\n\nOther great streaming things:\n\n- We also greatly enjoyed a few Canadian shows this year, including _Schits Creek_ (for its soft and thoughtful look at relationships and growth), _Kim’s Convenience_ (as it felt so oddly Toronto to us).\n- _The Chef Show_ was 100% fantastic. Favreau and Choi made me appreciate the small things in the kitchen (and we all spent a lot more time in our kitchens this year).\n- _Ugly Delicious_ reminded us all of how good food is more important than beautiful food. I still post food shots to instagram for future memories, but it’s all about the flavor and history, and of course finding the delicious in a thing.\n\n\nThere were so many other fantastic streaming things. Series and miniseries are the new movies these days. Being able to disappear into a universe for 10-20 hours is an amazing and greatly privileged thing to do.\n\n#MediaDiet","tags":["MediaDiet"],"categories":[{"hashtag":"mediadiet","slug":"mediadiet","title":"mediadiet","post_count":0}],"paid":false,"full_post_url":"","views":859,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"vtdwklvty39efise","slug":"things-im-still-learning-2010-edition","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2018-12-11T00:15:30Z","updated":"2022-02-18T00:15:45Z","title":"Things I'm still learning, 2010 edition","body":"2010 has come and gone. I've shipped a few projects, each a number of times. I've registered dozens of domain names and dropped a few of the older ones. I've started (but not finished) a dozen spare time projects. I've had hundreds of new ideas, and a few of them were even interesting. I've learned a lot, but not enough (it's never enough). I've expanded my horizons and gotten stuck in ruts. I've gained weight and I've lost weight.\n\nBut in the end none of that matters. The real question is, what have I learned?\n\n### I'm overworked.\n\nI don't like it, I have a choice, and yet I do it anyway? WTF? Working as much as I do gets less done with poorer quality. The prolonged, unproductive stress is a quick path to burnout and apathy, both of which are the enemy.\n\n### There are holes in my knowledge and experience.\n\nI need to spend time learning around the stuff I work on every day, and study things I haven't used for a while. I must grok more. I must not rush past the details I don't need now, as I'm missing out on a universe of useful things.\n\n### I don't contribute enough.\n\nI need to get involved in a more recent OSS project and post more of my personal stuff to Github. I also need to get back to teaching programming.\n\n### I need focus.\n\nSimpler, polished, less fat, and finished. I need to pick fewer projects and complete them, while still taking time to play with new ideas. New ideas are handy for learning new things, and polish and shipping develop my endurance. A lot of what I need to learn is how to say, \"No, but ...\" more tactfully. And sometimes I just need to say, \"Fuck off.\"\n\n### I need to breathe in as much as I breathe out.\n\nThe rate I make stuff has to be met with feeding my inner maker, and the pace of both needs to be tempered with rest and exercise. Wax on, wax off.\n\n### Me time.\n\nI get a lot done when reflecting and day dreaming. Even taking the time for a long lunch is a good investment. I need to slow the fuck down and feed myself and my muse. Skipping lunch to work? Why do I do this?\n\n### Great tools really matter.\n\nThey're the difference between a bloody knuckle and a perfect build. Why did I spend so long using crappy commodity hardware and fix-it-yourself software and systems? I must continue to hunt down and use good tools, stepping around the piles of shit that are out there.\n\n### Great people matter even more than great tools.\n\nPeople are multipliers, and I need to work with the people who are both positive numbers and much greater than one.\n\n### I am wrong more than I'm right.\n\nThe real trick is learning to figure out which is which. Take commuting for example, it sucks a lot less than I remembered. In fact, I really enjoy it. Remembering that I'm wrong makes it possible to see it when I am.\n\n### And over everything else, don't lose the passion.\n\nI love the rush I get when I finally grok something interesting, the insane joy of starting a new design, the comfort I find in crafting software the right way, and the feeling I get when I finally ship something.\n\n#Weblog\n","tags":["Weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0}],"paid":false,"full_post_url":"","views":867,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"xnebiso8uta00sm0","slug":"lee-valley-an-unexpected-place-to-buy-carving-tools","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2018-08-17T22:31:44Z","updated":"2022-02-17T23:32:15Z","title":"Lee Valley: an unexpected place to buy carving tools","body":"I was looking at buying a set of PFEIL carving tools this year, but was holding off as they're pretty pricy. I expanded my search a bit and found a similar set from a local Canadian company, Lee Valley Tools. They're hardened steel with a comfortable wooden handle. They sharpen easily (and keep their edge well), and feel like they will last a lifetime. They're also ⅓ the price of the PFEIL tools.\n\n![](https://images.warpedvisions.org/2018/11/IMG_1449.jpeg)\n\n*[$49 (CAD) block carving tools at Lee Valley Tools](http://www.leevalley.com/us/wood/page.aspx?p=31106\u0026cat=43332,43334\u0026ap=1)*\n\n#Art\n","tags":["Art"],"categories":[{"hashtag":"Art","slug":"art","title":"art","post_count":0}],"images":["https://images.warpedvisions.org/2018/11/IMG_1449.jpeg"],"paid":false,"full_post_url":"","views":1006,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"qf67md8bm065nvx2","slug":"icons-and-fan-art","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2018-06-17T22:30:56Z","updated":"2022-02-17T23:31:13Z","title":"Icons and fan art","body":"When my sketchbook is stale and I'm not feeling inspired, I look to pop culture for inspiration and ideas. I'm also a fan of other artists, and channeling some of their works through my own hands is immensely satisfying. It's an exercise that pushes you to analyze and rethink a thing that's interesting to me, and I always end up learning or discovering something new in the process.\n\n![](https://images.warpedvisions.org/2018/11/IMG_2277.jpeg)\n\n*A Super Mario Star (single colour, carved in EZ Cut)*\n\n------------------------------------------------------------------------\n\n![](https://images.warpedvisions.org/2018/11/P1120749.jpeg)\n\n*No Face (2 colour, Quick Kut)*\n\n------------------------------------------------------------------------\n\n![](https://images.warpedvisions.org/2018/11/P1060182.jpg)\n\n*Jake the Dog and Lady Raincorn (single colour, Quick Kut)*\n\n------------------------------------------------------------------------\n\n![](https://images.warpedvisions.org/2018/11/IMG_9915.jpeg)\n\n*Tortoro (single gradient, EZ Cut)*\n\n#Art\n","tags":["Art"],"categories":[{"hashtag":"Art","slug":"art","title":"art","post_count":0}],"images":["https://images.warpedvisions.org/2018/11/IMG_2277.jpeg","https://images.warpedvisions.org/2018/11/P1120749.jpeg","https://images.warpedvisions.org/2018/11/P1060182.jpg","https://images.warpedvisions.org/2018/11/IMG_9915.jpeg"],"paid":false,"full_post_url":"","views":461,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"prsh1gwq4e6cwm2h","slug":"a-savoury-media-diet-for-a-cold-and-somewhat-dreary-winter-2018","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2018-04-18T22:08:11Z","updated":"2022-02-17T23:08:32Z","title":"A savoury media diet for a cold and somewhat dreary Winter (2018)","body":"One of my favourite reads is [Kottke.org](https://kottke.org/), a blog by Jason Kottke. Calling it a blog is a bit of a slight: it's more of a magazine, like a proto-New Yorker. It's thoughtful and relevant, weaving current events, artsy things, various interesting edges of tech, and topics about general humanity.\n\nKottke has been killing it since '98, about as long as WarpedVisions has been around (though Kottke is better in every way). One of his regular columns is his _Media Diet_, a post I look forward to reading whenever it appears. There is something great about seeing someone else's obsessions and indulgences: there's a bunch to learn and inspiration to be had. So I'm in, here is the best of _my_ media diet from this dank Vancouver Winter.\n\n----\n\n*Books and other things in print.* I don't read as many real books and magazines as I used to. Much of the good stuff has moved online, though there is a bit of a void for great fiction and ridiculously deep reference on the web. When I do sit down with a great book, it's an event, with headphones, a glass of wine, and is one of those things that makes the muse happy.\n\nI spent a weekend re-reading [The Short Stories of Ray Bradbury](https://www.amazon.ca/Stories-Ray-Bradbury/dp/0307269051), while buried in my back catalog of Zeppelin, Queen, and other 70s greats. I read most of [these stories](https://en.wikipedia.org/wiki/The_Stories_of_Ray_Bradbury) as a child, as there were so many Bradbury collections at the time. His writing evokes memories of the early days of home computing and popular science, even though they were mostly written a generation before my childhood. The book is a meaty 1100+ pages and beautifully bound. While my original hardcover is pretty worn, it's one of the coolest things in my collection.\n\nI bought myself [The Flavour Bible](https://www.amazon.ca/Flavor-Bible-Essential-Creativity-Imaginative/dp/0316118400) over the Winter break. This book was perfect for where I'm at in the kitchen: it fits somewhere between an encyclopedia and thesaurus for how food pairs, relates, and what it all means to various cuisines and cultures. It's exhaustive and somewhat exhausting to read, but one of the most important references I've seen for food, ever. It's also full of tidbits and quotes from chefs from around the world, including Vancouver's own [Vikram Vij](https://en.wikipedia.org/wiki/Vikram_Vij).\n\n[Lucky Peach](http://mediakit.lky.ph) ceased publication with their [Fall double issue](https://www.washingtonpost.com/news/food/wp/2017/03/16/the-mysterious-demise-of-lucky-peach-magazine-and-its-uncertain-future/?utm_term=.d4f456f61470). The magazine was a collaborative effort between chefs David Chang and Peter Meehan (initially published by the great McSweeney’s, later going solo). It was a sort of Wired Magazine for food: weird, wondrous, and fantastically laid out. I re-read my last few years of the magazine on a snowy Saturday with some mixed beverages.\n\n----\n\n*Essays and long reads.* Most of my media diet these days can be found online. Until recently, I wasn't sure what I thought about the shift. I've made peace with it, even though publishing and typography in the browser are still in their early evolutions. The writing is there, and the rest is improving steadily.\n\n[The Wire, 10 years on](https://www.theguardian.com/tv-and-radio/2018/mar/06/the-wire-10-years-on-we-tore-the-cover-off-a-city-and-showed-the-american-dream-was-dead) plays on the nostalgia for one of the best shows in history. It succeeds, too, as I want to re-watch _The Wire_ again.\n\n[The Lottery Hackers](http://highline.huffingtonpost.com/articles/en/lotto-winners/) is one of those Huffington Post essays that gives me hope for long form writing on the web. It covers the incredible story of Jerry and Marge and their epic lotto hack, in a way that feels like the writing in Wired Magazine from the 90s. It's worth the time to read, and (I hope) is a sign of how great magazines can exist on the web.\n\n[Does Recovery Kill Great Writing?](https://www.nytimes.com/2018/03/13/magazine/does-recovery-kill-great-writing.html) is a story of addiction and creativity. I have a soft spot for stories about addicts and their struggle, and the question of how it affects the creative process is crucial to helping people out from under their monsters. The NYT is another example of how great writing and publishing can exist on the web. There is _hope_.\n\nSpeaking of Wired Magazine from the 90s ... [The Curse of Xanadu](https://www.wired.com/1995/06/xanadu/) is one of the great essays of their print magazine. It follows the story of Ted Nelson (who is also interviewed in _Lo and Behold_ below), a pioneer in computing as well as a sort of philosopher of tech. The essay follows the frustrating path of his vision for better ways to structure information, and how even a brilliant vision isn't enough to ship working software. And to think that it's another 20 years later should be enough to break any software developer's heart (if they have one).\n\nOne of the things the web brings us that didn't exist much in print is the whole teardown phenomena. Ken Rockwell (the somewhat cantankerous photography pundit) does a thorough analysis of the new [Apple Lightning Adapter Audio Quality](http://www.kenrockwell.com/apple/lightning-adapter-audio-quality.htm). I can't vouch for the accuracy here, but the analysis made me smile, as I love to see people dive into the details and talk about it.\n\nFor a more complete list of (most of) the essays I read, you can follow my [Instapaper feed](https://www.instapaper.com/p/robotpony).\n\n----\n\n*Streaming movies and series.* I don't see many new movies these days, or at least when I do it's from the comfort of my living room. It's not that I don't like the theatre, rather I think that a great movie deserves to be savoured and repeated (and why pay for it more than once?). Streaming is an amazing shift in consumption, as great media can be binged and repeated as often as desired. This is mostly good, I think.\n\n[Blade Runner 2049](https://en.wikipedia.org/wiki/Blade_Runner_2049) was a beautiful film. It stitched together dreamy visuals with a relaxed story that was interesting enough. I've only seen it once, so I won't rate the story further, except to say that I think it's worth a watch for the visuals alone.\n\nEdgar Wright's [Baby Driver](https://en.wikipedia.org/wiki/Baby_Driver) was a clockwork movie, pushing the art of heist movies to a new level. I have to admit the music wasn't quite my jam, but the movie is so well constructed that it didn't really matter. I saw it twice, hoping I'd enjoy the story a bit more, but in the end the details, the beats, and the timing are enough to make this well worth watching.\n\n[Burnt](https://en.wikipedia.org/wiki/Burnt_(film)) is a slightly slower paced _Chef_, telling the story of an obsessive chef's quest for his third Michelin star. The movie is much better than its ratings, though it lacks some of the quirk and redemption of Favreau's _Chef_. The photography is superb, showing the exacting beauty that is possible in a well run kitchen. There's inspiration to be found in _Burnt_, so I strongly recommend it for a quiet Sunday afternoon.\n\n[Shameless](https://en.wikipedia.org/wiki/Shameless_(U.S._TV_series)) is a dark comedy based on Paul Abbott's _Shameless_ (originally on Channel 4). _Shameless_ (US) is directed by [John Wells](https://en.wikipedia.org/wiki/John_Wells_(filmmaker)), famous for his work on ER, The West Wing, Trinity, and more recently Burnt (see above). I found Shameless the best dark drama comedy since Californication and Weeds. Shut up and watch it already.\n\n[Queer Eye](https://www.netflix.com/title/80160037) is a surprisingly adorable \"reality\" show. It will make you smile and is best watched with a glass of wine and your SO. You'll learn something, you'll smile, and you may even ~no-I'm-not-crying-shut-up-there's-something-in-my-eye~ enjoy it.\n\nThe best thing I've seen in years appeared on Netflix last month: [Ugly Delicious](https://en.wikipedia.org/wiki/Ugly_Delicious). It's David Chang's new docu-series, a sort of _Lucky Peach_ meets _Mind of a Chef_. It is the perfect way to get excited about food, travel, and film. And while I've seen a few critical reviews complaining about the underlying agenda of the series (that Asian food is awesome), I felt it was more about Chang's journey of realizing that truth for himself. The series has inspired me more than _Lucky Peach_, to both eat and cook more, as well as to travel and look at film as an important path to inspiration.\n\n[Lo and Behold, Reveries of the Connected World](https://en.wikipedia.org/wiki/Lo_and_Behold,_Reveries_of_the_Connected_World) (Netflix). [Werner Herzog](https://en.wikipedia.org/wiki/Werner_Herzog) tells a story in a series of interviews with technology and philosophy greats of the 20th century, covering topics around the impact of the huge leaps of the last several decades: things like the internet (and ridiculous IoT), AI, robotics, and where they intersect with humanity. It's an important exploration intended to make us pause and to think a bit more about what and why we're creating these things.\n\n### Full Circle\n\nIt's interesting to me that WarpedVisions started as a very raw link log in the 90s, and that it's really part of what it should have been all along. Sometimes it takes those persistent and successful peers to remind us of that.\n\n#mediadiet","tags":["mediadiet"],"categories":[{"hashtag":"mediadiet","slug":"mediadiet","title":"mediadiet","post_count":0}],"paid":false,"full_post_url":"","views":469,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"vcld4gpfzo0949nt","slug":"a-quick-review-of-linoleum-and-vinyl-block-printing-art-blocks","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2018-02-22T23:01:28Z","updated":"2022-02-17T23:02:32Z","title":"A quick review of linoleum and vinyl block printing art blocks","body":"A coworker was asking me what I used for linocut, so I made a chart of the blocks on my desk. There are several types of blocks that I don't have in my supplies (like mounted block and clear blocks), but the ones I use are a pretty common set of hobbyist materials.\n\n![](https://images.warpedvisions.org/2018/11/lino-block-types.png)\n\n- I love carving the *easy cut* black: it's soft, makes great edges, and it's cheap in my area (at Opus). But, transferring artwork to a black plate is super inconvenient.\n- The *safety kut* style blocks are a lot of fun to work with, but the edges tend to crumble a bit. It's also pretty pricy, but great for kids to start out with.\n- The flooring vinyl is school flooring I bought over 20 years ago (at auction). It's hard, but cuts a sharp edge and is the cheapest of all the supplies I have. If you warm it up a bit, it carves nicely, and it can print hundreds of copies without degrading. It does have a bit of surface texture, but this tends to make prints more interesting.\n- The *battleship grey* block is the classic school art department block. It takes a good edge, is fairly cheap, and carves easily enough once warmed up.\n- The *golden* and *wunder cut* blocks are interesting. I got these from Dick Blick, and they smell wonderful (like linseed and sawdust, probably because that's exactly what they are). They carve fairly easily, but the edges crumble a bit. Regardless, these are very affordable and great for prints with patterns.\n\n#Art\n","tags":["Art"],"categories":[{"hashtag":"Art","slug":"art","title":"art","post_count":0}],"images":["https://images.warpedvisions.org/2018/11/lino-block-types.png"],"paid":false,"full_post_url":"","views":537,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"ejz33vtojry9uc96","slug":"art-on-brand-lemony-lemon-prints","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2018-01-05T23:12:13Z","updated":"2022-02-17T23:12:27Z","title":"Art on brand: lemony lemon prints","body":"Occasionally I like to sketch and carve things around our [lemony brand](https://lemonstand.com). It's fun to think sideways around our polished brand marks, dreaming in colour and texture. These prints don't represent anything we would ever use, but the exercise was a good stretch for me (and good practice).\n\n![](https://images.warpedvisions.org/2018/11/IMG_1993.jpeg)\n\n![](https://images.warpedvisions.org/2018/11/P1120747.jpeg)\n\nThis is a second print of the plate with an attempt at layering a textural plate over top. I still need to work on this technique, but I do like the extra texture it adds to a print.\n\n#Art\n","tags":["Art"],"categories":[{"hashtag":"Art","slug":"art","title":"art","post_count":0}],"images":["https://images.warpedvisions.org/2018/11/IMG_1993.jpeg","https://images.warpedvisions.org/2018/11/P1120747.jpeg"],"paid":false,"full_post_url":"","views":385,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"gq591bz22cxyyplq","slug":"a-javascript-link-mashup-for-winter-2017-things-i-used-and-liked-in-the-js","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2017-12-11T22:55:07Z","updated":"2022-02-17T23:05:49Z","title":"A JavaScript link mashup for Winter 2017: Things I used and liked in the JS universe this year","body":"2017 was a good year for JavaScript. The newer language features are now part of our daily routine. Tightly integrated CI and packaging scripts are the norm, and we have a huge sea of libraries and tools available to us. The core JavaScript frameworks have settled down and matured to the point that we can be confident in JS as the base for large-scale commercial projects.\n\nHere are a few of the main JavaScript things that impressed me this year:\n\n------------------------------------------------------------------------\n\n[GraphQL for Node.js](https://dev-blog.apollodata.com/apollo-server-1-0-a-graphql-server-for-all-node-js-frameworks-2b37d3342f7c) is the most exciting library of 2017. [GraphQL](http://graphql.org/learn/) (the QL stands for *query language*) is a natural evolution of APIs: it makes it easier to ask a web service questions without having to work as hard for the answers. While RESTful APIs provided a clean way to publish and present data, building APIs based on static object definitions force a lot of work on the things that need the data, which is wasteful and complex (as you end up with much more data than you need). And while including the concept of server-side queries isn't new to APIs, GraphQL does it with a simple syntax that fits nicely into the JS world.\n\n------------------------------------------------------------------------\n\nReact had a great year as well, with a [major feature release](https://reactjs.org/blog/2017/09/26/react-v16.0.html) and [some sweeping licensing changes](https://code.facebook.com/posts/112130496157735/explaining-react-s-license/). I think the combination of these changes and the vitality of the React ecosystem have pushed it well past AngularJS this year. [Redux](https://medium.com/@rintoj/its-2017-time-to-give-redux-another-thought-fa3bc4373df9) has gained a bunch of ground over [Flux](https://medium.com/@gyeon/redux-vs-flux-a31a02faccf3) this year too, though Facebook could undo that in 2018 with their partial-kinda-sort-of replacement QL/Flux hybrid [Relay](https://facebook.github.io/relay/docs/en/getting-started.html). The [next version of React *Fiber*](https://techcrunch.com/2017/04/18/facebook-announces-react-fiber-a-rewrite-of-its-react-framework/) has already [landed in v16](https://code.facebook.com/posts/1716776591680069/react-16-a-look-inside-an-api-compatible-rewrite-of-our-frontend-ui-library/) and will be core to significant improvements to React applications in 2018.\n\nOne of the ways to gauge the success of a UI framework is in what gets built with it. This Fall I found a solid [spreadsheet](https://github.com/denisraslov/react-spreadsheet-grid) component. I've also been using [SemanticUI](https://semantic-ui.com) and its [React bindings](https://react.semantic-ui.com/introduction), though I am a bit worried about their slow pace of updates. There are a few commercial UI kits, like [ExtReact](http://examples.sencha.com/ExtReact/6.5.1/kitchensink/#/) and [Webix](https://webix.com) that have some legs, though I'd love a richer open kit that we could all contribute to.\n\n------------------------------------------------------------------------\n\nI've worked to improve how [we develop software](https://codetree.com/how-we-ship/interviews/lemonstand) this year with things like deeper CI, better Lint and formatting tools, and better practices. In our quest for improvement, I found [Prettier](https://github.com/prettier/prettier), a JavaScript code formatter that is pretty smart about line lengths and readable code. You can use it in your build scripts, CI, or your favourite editor.\n\n------------------------------------------------------------------------\n\nSpeaking of editors, I switched to [Visual Studio Code](https://code.visualstudio.com) this year, which is built on Electron (Node, Chromium, and V8). VSC replaces both Atom and Sublime, as well as my older favs [Coda](https://panic.com/coda/) and [Espresso](https://espressoapp.com). Visual Studio Code plays well with all of the recent linters, CI, build tools, and other gizmos. It performs well for coding tasks in JS and the various web formats I use regularly. When I work with larger text files, however, I'll still switch to the Vim of Mac (TextMate), or actual Vim (though I'm getting pretty rusty with that these days).\n\nThere was a time when I couldn't imagine Microsoft as a leader in OSS or web tech, but they've found their mojo with VSC and have a steady release cadence that's downright impressive.\n\n------------------------------------------------------------------------\n\nOne of the best things about JavaScript in 2017 was the huge selection of mature and featureful libraries.\n\nFormatting dates in JavaScript, for example, has always been a bit of a pain, but libraries like [date-fns](https://date-fns.org) make it a breeze. Similarly, CLI apps have always felt a bit clunky to build with NodeJS, but I found that by using [Ink](https://github.com/vadimdemedes/ink), a React-like library and components for CLI apps, I write a lot less fiddly `console.log()` code. Ink also makes it easy to write more complex CLI tools, which could be especially good for the ecosystem.\n\nIn terms of packaging tools, I haven't sided on a single bundler this year. That said, I do find [webpack](https://auth0.com/blog/webpack-a-gentle-introduction/) easy to set up and use. It's one of the current generation of build tools, and has simpler, clearer configuration than its predecessors. [ParcelJS](https://parceljs.org) is on my radar as a simpler way to bundle JS applications, but I haven't had a chance to use it on anything big yet.\n\nAnd while there are too many JS libraries to mention, the exciting thing is that there are huge communities and tools for recommending great libraries, like [MicroJS](http://microjs.com/#) and [JavaScript weekly](http://javascriptweekly.com/).\n\n------------------------------------------------------------------------\n\n[Storybook](https://storybook.js.org) is one of those unexpected tools: it's a mature UI builder for ReactJS, that feels about the way a UI builder should feel these days. I didn't find myself getting lost in a tonne of automated code generation (i.e., it felt surprisingly lightweight). I haven't used it in production yet, but I'm looking for ways to make it part of my prototype toolchain for early 2018.\n\n------------------------------------------------------------------------\n\nAnd finally: as JS matures past ES6 and ES7, the language is getting easier to teach (and learn). Here are some resources to help you learn more about the evolution of JavaScript:\n\n- [Another way to think about `this` in JavaScript](http://2ality.com/2017/12/alternate-this.html)\n- [The state of The state of JavaScript modules](https://medium.com/webpack/the-state-of-javascript-modules-4636d1774358)\n- A very [succinct ES6 cheet sheet](https://devhints.io/es6)\n- [Some recommended NodeJS practices](https://github.com/i0natan/nodebestpractices)\n- Some [async/await](http://nikgrozev.com/2017/10/01/async-await/)  learning (a pending feature in ES7)\n- The [AirBnB JS style guidelines](https://github.com/airbnb/javascript) that pretty much everyone uses these days\n- [A cartoon intro to Fiber](https://www.youtube.com/watch?v=ZCuYPiUIONs), a very detailed view at how rendering improves with fibers\n- [The state of JS in 2017](http://stateofjs.com/2017/introduction/)\n\n#JavaScript #Programming\n","tags":["JavaScript","Programming"],"categories":[{"hashtag":"Programming","slug":"programming","title":"programming","post_count":0},{"hashtag":"JavaScript","slug":"java-script","title":"java script","post_count":0}],"paid":false,"full_post_url":"","views":255,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"he7kl0l8x3fzd06t","slug":"simple-methods-the-triage-board","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2017-11-14T23:43:19Z","updated":"2022-02-17T23:43:35Z","title":"Simple methods: the triage board","body":"Some of my most productive business tools are the simplest. Take the *triage board*. It's a whiteboard that hangs over my desk that has a list of my current projects, with magnets marking what I'm working on next. Weekly I erase the board and re-prioritize my projects, and daily I scribble notes and move the magnets as I work.\n\nThese concrete tools are about focus, flexibility, and the least amount of investment possible. It's critical to work on the most important things, and important to know what's next. Seeing the list of clients and projects helps me understand where I stand in terms of bandwidth too, using the simple, physical limits of the size of the board and legibility of my writing at smaller sizes.\n\nI also use other real world hardware and the occasional piece software for other aspects of the business of software, but the board is big, and bold, and in my face.\n\n## Charting a course with post-it notes\n\nI also use PostIt notes for lists of tasks that need to be done next. The notes stick to the whiteboard beside projects, so I can rotate work around. These are not detailed notes or TODOs, rather they are lists of key tasks that need to be done next, as well as notes from conversations and discussions related to the project.\n\nWhen detail notations are required, I rely on formal specifications, issue tracking, and project management tools. These are the endpoints of the process, rather than the crux. This allows me to use tools that fit the job rather than forcing all problems into a single method.\n\n## The principles of business tools\n\nWhat I've found is that there are a few simple principles that are critical for small business tools and processes.\n\n- Low cost and high utility are critical \n- Use physical constraints of real-world tools to your advantage\n- Use software only where it's the best tool for the job\n- Single tools do not often fit all problems \n\nI've seem businesses spend disproportionate amount of their profits on automation tools, processes, and other organizational objectives on systems that failed to deliver.\n\nA set of tools should be grossly pragmatic, vastly improving profitability and quality. Anything less is irresponsible to the business and the businesses purpose.\n\n#Software Engineering\n","tags":["Software"],"categories":[{"hashtag":"Software","slug":"software","title":"software","post_count":0}],"paid":false,"full_post_url":"","views":465,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"3rgdni20zq0kow65","slug":"my-love-hate-relationship-with-sprints-agile-and-software-development","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2017-04-22T22:34:40Z","updated":"2022-02-17T23:35:26Z","title":"My love-hate relationship with Sprints, Agile, and software development processes in general","body":"\u003e \"A common example is process as proxy. Good process serves you so you \u003e can serve customers. But if you're not watchful, the process can \u003e become the thing. This can happen very easily in large organizations. \u003e The process becomes the proxy for the result you want. You stop \u003e looking at outcomes and just make sure you're doing the process right. \u003e Gulp.\" (Jeff Bezos)\n\nThis is a quote from a Jeff Bezos letter to the board, talking about internal metrics and improvements. Sometimes when you add a process to a problem, the process can become the focus and not the outcome.\n\nIn PM land we use tools and techniques like burn down charts, sprints, and spikes. You can get obsessed over getting these things right, and fail to ship effective, quality software. The special language used in and around these processes adds to the problem too, as the language ends up feeling like an accomplishment in itself. Too much focus on the pomp and circumstance of a process takes away from actually building great software.\n\ne.g., *Let's put a pin in this* ...\n\nThe real value isn't in the process or lingo, it's in doing things better and making better software within profitable budgets. It's something that's been rolling around my head for a while, and Bezos describes it nicely.\n\nI was talking about basic project management principles with a friend the other day, when I came across this Bezos quote. It sparked a discussion about software development processes, including hitting a few topics that I think are especially distracting in software development.\n\n## Do you use sprints, burn down charts (etc.) in software project management?\n\nYes, these are fairly common software management tools now, and I use some aspects of them. Now of course we don't say \"spike\" ever, or \"tent pole\", but we do plan sprints of flexible durations, and we're always aiming for minimum viable steps and frequent releases.\n\nI think it's a common mistake to set fixed durations with sprints, as it can shift the focus to succeeding at the sprint versus shipping something viable (i.e., both useful in the short and medium term). It can really deflate the team if sprint durations make no sense, as developers pick up on goals that aren't about useful or quality software.\n\nFixed duration sprints can also force poor decisions, as your primary goal is time and not the other factors important to software. If you relax your use of sprints a bit, you can pick sprint times that fit the underlying problem better. The real goal with sprints is to focus on scoping the project, and improving the overall tempo of development. Sprints shouldn't be truncating quality for minimum viability, nor should they be pushing teams to burnout faster. Really, all we want from sprints is a framework to keep us focused on the right features and a strong speed of development.\n\n## Does 'sprint' equate to 'crunch time'?\n\nNo, it shouldn't.\n\nThis is a great question. My friend is coming from another domain, specifically small-scale custom manufacturing. He's not fully familiar with software development terminology (though he's vaguely familiar with how software is generally developed). Conversations like this are a great reminder that the language we've developed in this industry is insular, even though it is based on what we think are clear metaphors. When you think about if from an outsider's perspective, you can see how arbitrary the language is, and how the imagery doesn't fit perfectly.\n\nThis is especially true with terms like *sprint*. You can't literally sprint all of the time, as it suggests expending the maximum amount of energy over short distances. Software projects are anything but short, and the idea of sprinting through the entire thing is absurd. The PM concept of *sprints* doesn't match the real world use of the term very well.\n\nA sprint is like a focused mini project. To some degree, it's like having a personal trainer guide your workouts and push you a bit. The idea is to use the mechanism to help you push to a clear goal.\n\nMore traditional PM structures projects as very long, boring wanderings through the desert. Waterfall projects, for example, don't produce workable software until much later in the process.\n\n\u003e *We might say, \"we're authorizing blanket overtime\" which tells the \u003e guys we need as much effort as we can get right now. There are some \u003e tasks on the shop floor which simply can't be done faster, so we \u003e would add more hours. Or worst case a second shift. There's huge \u003e inefficiency in adding a second team.*\n\nThat is a common manufacturing practice for increasing bandwidth, but sprints aren't only about increasing output (though the term strongly suggests that). A sprint is more like setting up a smaller shop, with a special, focused project.\n\n\u003e *Ahhh. We would job things out to other manufacturers ...*\n\nThat's not quite it either, though I do find using sprints for special ops is especially useful, as you push the focus of the tool to problems that need special focus.\n\nThe concept of project sprints was really to make things feel more focused and tactical. It was a backlash on the traditional waterfall planning (i.e., requirements, design, implementation, and testing).\n\nBut after using sprints a bunch, they can become empty words for traditional project management things. The trick is really to keep sprint projects focused on smaller, but useful deliveries.\n\nSprints really just become project phases like those in the waterfall model, except that you've organized the deliveries differently. You try to partition design into things you can deliver on shorter intervals, rather than aiming to deliver one giant thing at the end. There is a huge advantage to delivering these small and useful pieces early on, as you learn a lot about what works (and doesn't) well before the end of it all.\n\nI was saying earlier that the concept of sprinting suggests running fast, which if you think about it is so expensive in terms of long-term motivation and energy. It's an odd side-effect of the name itself, as running fast isn't part of the definition of a software sprint, yet the term implies it so strongly.\n\nThere's this pattern of making special languages for our formal processes, based on the ways we approach building software. It's difficult to find ways to describe processes that don't eventually become ideology or warped in some way. The simple act of naming the parts can change how we think of them, if we lose focus on the real goals.\n\n\u003e *I can't think of an analogue in manufacturing ...*\n\nIt eventually boils down to the same set of problems as with projects in any industry. I've seen special-ops style projects in manufacturing before:\n\nOne re-manufacturing mill I worked with started a finger-joint mill. They took their best staff and had them design and built the new plant in stages, apart from their traditional management techniques. They split the work into smaller chunks, and had something up and running early.\n\n\u003e *Ahh, I see!*\n\nThey treated it like a special thing, which helped them escape their traditional planning techniques.\n\nOf course sprints aren't really just special-ops anymore, but that's where the concept started from. We used to say *\"Let's push hard and get this out by next week\"*. We used this *push* mindset well before Agile methodologies were well-defined, and sprints were really an extension of that.\n\n\u003e *Yeah we did that too, but I guess we were so unfocused that it was \u003e normal to work on random projects.*\n\nIn the end it's just different words for the same things. The mindset of making projects smaller and focusing them on early and useful releases is the best part of sprints. The concept of isolating design to reduce scope is also great.\n\nReally, sprints cut across the grain of the old waterfall style planning, repackaging a lot of the risk to earlier deliverables. It really only works if your sprints produce production quality deliverables though, which is why it's so important to avoid serving the process over the goal of building something incredible.\n\nSprints are a good example of allowing the process to become the focus, instead of obsessing over what you're making. This is what frustrates me the most about software development methodologies: when great concepts become ideology and the underlying intent is lost. You start spewing the bullshit terms without even thinking. They become bullshit when the term is the focus, rather than the outcome.\n\ne.g., *Let's spike this feature for the next sprint.*\n\nOr, *Our sprints are only 1 week, so that story is too much for us right now ...*\n\nIt's disingenuous to use these words all the time. It allows a lot of passive-aggressive behaviour too, as you can use the noble act of following the process as a way to beat down legitimate concerns about what customers or the business needs.\n\nWhat I see happen is that smart people can control production and planning by using the process language in clever ways. Arguing things for the sake of process can be a sign of that problem, i.e., elevating the process above the intent.\n\nThe problem isn't in the process, however, it's just a reminder that it's easy to focus on the wrong goal. Sticking to your process is often a much clearer path than figuring out what your users really need, or how to design that thing in such a way that it's a viable business. And because the process can be easier to succeed at, it becomes an easy target for people on a career path.\n\nAs software leaders we just need to remind our people to apply the process and tools for the outcome. We want to build useful things for our fans and users, and we want these projects to serve the needs of the business. The processes and methodologies are just tools to this end, and not the end itself.\n\n#SoftwareEngineering #Weblog\n","tags":["SoftwareEngineering","Weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0},{"hashtag":"SoftwareEngineering","slug":"software-engineering","title":"software engineering","post_count":0}],"paid":false,"full_post_url":"","views":374,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"1c0y98wi5ejnvf7f","slug":"rediscovering-the-interestingness-in-my-twitter-feed","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2017-04-17T22:42:14Z","updated":"2022-02-17T23:42:45Z","title":"Rediscovering the interestingness in my Twitter feed","body":"Sometime over the last year I stopped paying attention to Twitter. Between the political cacophony of 2016 and a growing list of people I was following, the noise ratio was just too poor to hold my interest. Twitter had become like LinkedIn to me, a service I used to have a professional presence, but not one that inspired or taught me anything. I had given up.\n\nA friend recently challenged me to find the *interesting* in Twitter again. He suggested declaring bankruptcy and starting over. While I liked his suggestion, I decided to apply another minimalist principle to my feed. Instead, I've been scrutinizing the people I follow looking for the \"spark of joy\" in what they post, things that make me grin, things that inspire me, or things that challenge me in some way. Anything that's disingenuous, caustic (for no reason), or just consistently unintelligent can go.\n\nEvery week or so I read a few hundred Twitter posts and un-follow things that don't have that spark. Slowly, my feed has improved. It's almost at the point now that I'm consistently seeing interesting things.\n\n## Things that don't have the spark\n\nI've found a few patterns in how people use Twitter, things that just tend not to work or be interesting.\n\n1. People who repost a lot are not very interesting. There are a few exceptions to this, but it's true enough that it's my first heuristic for questioning a source.\n2. People who post a lot of political stuff are less interesting overall too. This, unfortunately, has had me filtering out a lot of otherwise interesting programmers and designers, especially in 2016. We should all care about our country and how its run, but I find that topic doesn't mix well (at least in excess) with things that are inspiring or interesting for people who create things.\n3. Corporate accounts, especially those that only post links to their blog articles, are rarely very interesting. They can feel dishonest when they're clearly only there to build traffic (versus trying to teach, inspire, or motivate).\n4. Famous people are not always interesting either, especially when they're just there to build traffic.\n\nThere are also a few hints in the body of what people post that affect how I feel about them:\n\n- random UPPERCASE words,\n- bad grammar or spelling,\n- crappy images,\n- overuse of emojis, or\n- overuse of hashtag / mentions \\...\n- unless of course using it is somehow ironic or instructive.\n\nThere are a few details that make people stand out on Twitter, things like:\n\n- clever use of whitespace,\n- funny/smart use of emojis, and\n- other fun uses of images, links, etc.\n\nIt's amazing what a bit of whitespace can do to a Twitter post, even though not all clients show it. A small amount of attention to detail shows that an author cares (and is knowledgable).\n\n## In the end, weeding the garden is good\n\nThe best thing about cleaning out who I follow is that I've re-discovered some really interesting people, who write things that change how I think. It also has me weighing what I post more carefully, as Twitter doesn't really allow you to demote or segregate content well. For what it's worth, some basic categorization for feeds would allow for people to segment their streams a bit, allowing followers some choice of what aspect of a person you read about.\n\n#Weblog\n","tags":["Weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0}],"paid":false,"full_post_url":"","views":384,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"14e42gfiw03v2vfe","slug":"linocut-lines-and-texture","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2017-04-17T22:33:33Z","updated":"2022-02-17T23:34:15Z","title":"Linocut: lines and texture","body":"I made a quick print this weekend based on a few drawings I was working on last week. The idea was to make a block print look like a sketch, and to use background lines as a textural element.\n\n![](https://images.warpedvisions.org/2018/11/P1120795.jpg)\n\n![](https://images.warpedvisions.org/2017/04/IMG_9518.jpeg)\n\n#Art\n","tags":["Art"],"categories":[{"hashtag":"Art","slug":"art","title":"art","post_count":0}],"images":["https://images.warpedvisions.org/2018/11/P1120795.jpg","https://images.warpedvisions.org/2017/04/IMG_9518.jpeg"],"paid":false,"full_post_url":"","views":393,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"ptjj1e0qrmqko5km","slug":"tip-become-a-part-of-your-side-projects","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2017-04-02T23:21:00Z","updated":"2022-02-18T00:21:32Z","title":"Tip: Become a part of your side projects","body":"I had a realization last week:\n\n\u003e How can it be more *me*? If I'm not in it, can I get into it?\n\nI'm an idea guy. It's why I love designing software, both in terms of system design and user experience. I love designing and developing products too. It's something that can get me fired up, keep me from sleeping, and keep me motivated through even the darkest, rainiest days.\n\nIt's easy to conflate the love of designing things and your favourite ideas with projects you should actually work on yourself. Not every idea is worth doing. Not every idea is suitable for a given company, team, or even an individual to do. The thing has to fit the people making it somehow. Ideally the ideas and designs embody something that is at the root of those people, as the result will be something that is much more than the sum of its parts.\n\n## So I had one of those ideas\n\nLike many people, I use task lists to organize the projects I work on. I write the tasks on a large piece of paper, organizing them in lists and columns around the sheet. In the center of the page, I summarize the high points of all the lists into a single *focus list*, which I separate visually from my others on the page. This list has very specific tasks and goals that serve the various projects and sub-projects on the page. Often finishing the focus list is an incredibly successful sprint of work towards some larger goal.\n\n![One of many focus list wireframes from 2016](https://images.warpedvisions.org/2017/05/foozl-blues.png)\n\nI've been thinking about building a tool for my *focus lists* for a few years now. I've used the project as a way to practice sketching various UI designs, looking for balances between skeuomorphic, spacial, and domain-centric ways of thinking about the problem. As a practice project it's been fun.\n\nThe other day I read that Microsoft planned a shutdown of a recent acquisition, Wunderlist. I wondered if I should dust off my *focus list* designs; I could easily commercialize the idea and build it myself. The problem was that I didn't bother to stop and ask myself if it was something I should do. I didn't wonder if it fit who I am.\n\nWhen I dug into the question a bit, I found a list of reasons why I wanted to build a task-list application:\n\n- My idea of *focus lists* is pretty great\n- I know how to design and build web things\n- I have a bunch of designs that I'd love to build\n\nMost of my reasons to build a TODO tool are all pretty shallow.\n\nIf I ask myself harder questions, the project seems way less obvious:\n\n- Does the project fit who I am?\n- Are task lists something I get excited about?\n- Should I really build a task app?\n\nI had to admit to myself that I'm not passionate about productivity tools. I use them and I need them, but I don't talk or write about them, as they're more of a necessary evil than something that excites me.\n\nLooking more objectively, a task-list project just doesn't fit me. It isn't very *Bruce*. I love the idea. I'm proud of my clever design and approach. But the thing itself isn't something that lights a fire under me. It doesn't get me excited for the thing, rather I'm more excited about the hubris of it.\n\n## From point A to point B\n\nTo figure out if a project is really *me*, I think I have to do a few things. First, I have to imagine that it's the only thing I'm working on. Am I still excited a month from now? Am I talking about it? Am I willing to do the boring work to finish it?\n\nI also have to imagine if it's something that fits what I've done already, at least the stuff I'm still excited about. It needs to fit where I'm going too. If I draw a line through those things and extrapolate, do I like where it points? Is the thing it points to a better version of me?\n\nSo I now have a new question for my side projects: is this project really *me*? Is it a very *Bruce* thing? I have lots of project ideas that are totally me. I think I'll focus on those.\n\n#Weblog\n","tags":["Weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0}],"images":["https://images.warpedvisions.org/2017/05/foozl-blues.png"],"paid":false,"full_post_url":"","views":379,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"bq5kljps2x16rthv","slug":"reasons-i-hate-todo-list-and-task-tools","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2016-12-30T23:40:51Z","updated":"2022-02-17T23:41:12Z","title":"Reasons I hate TODO list and task tools","body":"There's a lot to like about our beloved task management tools. But if we're honest, there's a lot they get wrong too. Here are a few ways TODO tools grind my gears:\n\n1. Every task and list looks exactly the same.\n2. Lists are organized with limited hierarchy and pre-requisites.\n3. Lists are organized with no real spacial control. *(Kanban boards are a great example of how spatial organization can vastly improve how we think about certain types of lists.)*\n4. Tasks lists are either a huge a black hole or they're a cacophony of noisy craziness.\n5. Task tools can be too atomic. A task is an indivisible line item, in single list. Grouping and splitting tasks is often manual and way too much work.\n6. Importance is missing from most list tools; everything has the same weight; there are only minor visual differences between lists and items.\n7. TODO lists require careful weeding, and they accumulate cruft really easily.\n8. It's can be difficult to work a list; one task is usually a dozen and not all completed tasks are interesting.\n9. Task lists don't care where you're at personally, they just sit and stare at you. I swear my lists judge me some days.\n10. They don't play nicely with your schedule. Not everything on your lists needs to hit your calendar, but the stuff that does *really* does.\n11. Completing a task is more than checking it off. Tasks have more exit states than *done*, anywhere from \"Wow, that was a bad idea\" to \"This doesn't matter anymore because of such-and-such\".\n12. Huge lists are super demotivating.\n13. Huge sets of completed tasks don't have the positive effect you wish they would.\n14. Some tasks are time sensitive, which is more than just when it's due.\n15. Some tasks are recurring, but not in the it's-due-every-wednesday sort of way. Meaningful tasks like \"You should really filter through the bug list this month\" need to happen regularly, but not monthly on Tuesday mornings.\n16. Some tasks are just plain different than others. I'm looking at you, \"Find inspiration today\".\n17. I finish certain types of tasks better at certain times of day, or when I'm in certain moods.\n18. And finally, task lists are very rarely inspiring. I've never looked at my TODOs and had an epiphany.\n\n#Weblog\n","tags":["Weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0}],"paid":false,"full_post_url":"","views":516,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"h2apzlm1dge8nj52","slug":"being-honest-about-technical-debt","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2016-07-17T23:05:45Z","updated":"2022-02-16T00:06:54Z","title":"💰 Being honest about technical debt","body":"I don’t like the term _technical debt_. We mostly use it without thinking, and it’s often the wrong way to frame the value of our software designs. Most of the time we’re being dishonest when we call our decisions debt, and unless we're planning out the general long term costs of our approach, it's not debt at all.\n\nWith financial debt, money is mostly money, regardless of the source. The terms of a loan are known up front when we borrow money, and those terms may or may not be satisfactory. Any decision to borrow is based on a known commodity, and on the need and the terms, both compared with the gains. Taking on debt, at least in business, is an informed and unsurprising proposition. Debt is often a rational choice for a business too, if the risk is low and the return is favourable. It’s rare for a company’s investors to allow a business to take on financial debt that isn’t clearly understood.\n\nWith technical debt, both the commodity and the terms can be fuzzy. What’s being borrowed isn’t always known, and the risk/reward isn’t always easy to measure. If technical decisions are a commodity, they can be a volatile one. If the cost of those decisions are the terms, then they’re not always agreed upon ahead of time. Taking on any debt without knowing both the values of the commodities and the cost of the terms makes it impossible to think about the proposition clearly.\n\nAt best, we treat software technical debt like consumer debt, where we blissfully ignore the commodity and the terms of our choices, focusing only on our immediate need. At worst, we label our poor technical decisions debt (especially our predecessor’s). It’s a lazy phrase, a cop-out, and is a costly way of doing business.\n\nThere is a place for actual technical debt in software projects, but it needs to be informed and planned. For example, it may not make sense to invest in a fully scaled system before proving out a concept. Starting down a simpler path can be the better choice, as you can reduce the overall risk with a moderately increased cost. That simpler path has a future cost, of course, but it can be a rational decision to defer the full cost of the solution until you know more about the features and fit to the market. Taking a split risk in approach can be good for the business, but the risk and terms need to be part of your planning.\n\nTechnical debt that rears its head unexpectedly, on the other hand, isn’t debt, it’s _regret_. We often regret our past decisions, as they can be very costly and inconvenient. But if we treat our remorse as debt, then we’re admitting that we’re not really suited to making technical decisions for our business. We’re missing the value of what technical debt can be, which is a predictable stepping stone to future growth.\n\nWe need to be honest about our past technical choices. Debt is something that we plan for, that has a known future cost. Regret is something that we’re remorseful for, but represents a historic lack of planning and unquantified risk. We should be taking risks in the business of software, but they should be sincere and measured actions, otherwise we’re fooling ourselves into thinking that we’re being rational in our business.","tags":[],"paid":false,"full_post_url":"","views":420,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"3pqehe5p2v22m60q","slug":"tips-for-avoiding-technical-debt-and-regret","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2016-07-15T22:56:05Z","updated":"2022-02-18T00:46:22Z","title":"Tips for avoiding technical debt and regret","body":"[Last week](being-honest-about-technical-debt) I was talking about how it’s easy to conflate debt and regret when it comes to technical decisions. Technical debt is the set of simple, shorter paths in software development that you follow intentionally. Regret is more about getting lost and following unsafe paths, often blissfully unaware that you're lost. Technical debt will feel good in the long run, as it helps you get somewhere faster at a reasonable cost. Regret, on the other hand, feels bad, as you can see the wasted time and effort spent on a path that was clearly followed by mistake. It's easy to feel unqualified to measure technical decisions, especially if you're not technical. You may be disconnected from the planning process or you may not understand the jargon and details of an approach. How can you ask intelligent questions about risk when you feel so separated from what's happening? How can you make clear decisions about risks with incomplete technical knowledge? Luckily, most regrettable technical decisions fail to satisfy even the most basic of principles, and risky debt is all about the poor ratios of cost versus gain.\n\n## Know the scale of your product and features\n\nIn terms of debt and regret, you can measure the risks by understanding two things:\n\n- the basic _scale_ of your product, and\n- the basic _dependencies_ in the features your product offers.\n\nUnderstanding these doesn't require much technical knowledge, and that understanding is anchored to what your product does. Thinking of risk starting with facts and how they relate to what your product provides you a rational base to start from. Scale includes things like the number of users, the size of the things they do, and how fast they need to do them. When you have a lot of something, you can ask questions around your features and those abundant things: how can we report on X with Y users? Can we also do Z? Dependencies are simply how the features and pieces of your product relate, as there will be certain features that are more important to your product than others. Those features are riskier, as your system wouldn't be viable without them, and other features may not be possible without them. Our product has to do X to do Y and Z; what if X is too slow? What if we can't do Y? Bigger, more fundamental things are obviously more important. Understanding the scale and dependent risks gives you a set of facts you can use to anchor your thinking. The truths don't change as you develop your software either, unless you change the focus of the product.\n\n## Know which risks to focus on\n\nTo simplify thinking about risk, you can place it on a gradient of principles:\n\n1. Decisions that are never questioned or justified represent the risk of _the unknown and unseen_.\n2. Decisions that follow known bad paths represent the risk of _the known bad_.\n3. Decisions that don't follow known good paths represent the risk of _the likely bad_.\n4. Decisions that follow new paths represent risk, that of _the unknown_.\n5. Decisions about the most fundamental parts of your system are risks _of increased or root dependency_.\n6. Decisions about the biggest parts of your system are risks _of scale_.\n7. Decisions that defer costs are a risk _of future expense_.\n8. Decisions that prevent key opportunity are a risk _of reduced momentum_.\n\nWhen you think about risks in terms of principles, you can separate some of the technical from the rationalization. When a team wants to build a custom framework (a classic example), it's easy for a non-technical manager to see that the approach isn't a known good, and that it's a new path. These principles don't prevent following that path, but they do make it clear that the risks and likely costs are not insignificant.\n\n## Know when to consider risks\n\nConsidering risks is a crucial part of a healthy software development process. Knowing the size and dependencies of your product gives you a place to anchor your thinking. Identifying the bigger, more fundamental issues in your product using principles helps you identify the most basic major risks, as well as giving you a way to describe the risks themselves. But, do you consider every risk? Do you weigh every change? Most organizations can be improved by considering the risks of only a small portion of their technical decisions. Anything foundational or large should be considered carefully, and anything that violates one ore more of your team's core principles should be actively avoided.\n\n## Know your history\n\nFinally, another great way to identify risks is to learn more about the history of software failures. The principles that identify risk are clear throughout the history of failed projects, and the ways that the risks remained hidden help to identify future failures.\n\n- [PSU's list of well known software failures](http://www.cse.psu.edu/~gxt29/bug/softwarebug.html),\n- [Wikipedia's list of famous software bugs](https://en.wikipedia.org/wiki/List_of_software_bugs) (check out the long list of references),\n- [Why software fails (IEEE)](http://spectrum.ieee.org/computing/software/why-software-fails),\n- [TAU's software horror stories](https://www.cs.tau.ac.il/~nachumd/horror.html),\n- [Jeff Attwood's history of software project failures](https://blog.codinghorror.com/the-long-dismal-history-of-software-project-failure/). Also see his mega list of [recommended reading for developers](https://blog.codinghorror.com/recommended-reading-for-developers/),\n- [Steve McConnel's Classic Mistakes Enumerated](http://www.stevemcconnell.com/rdenum.htm) (based on his book _Rapid Development_),\n- [Software Project Secrets: Why Software Projects Fail](https://www.amazon.com/Software-Project-Secrets-Projects-Experts/dp/1590595505) (book),\n- [The Mythical Man-Month: Essays on Software Engineering, Anniversary Edition](https://www.amazon.com/dp/0201835959/) (book)","tags":[],"paid":false,"full_post_url":"","views":488,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"2wznlsgfx07iq9k9","slug":"42-things-i-will-make-in-2016","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2016-04-10T07:00:00Z","updated":"2022-02-17T23:06:50Z","title":"42 Things I will make in 2016","body":"The New Year came and went without much of a fuss. I read about the [2016 Maker Challenge](http://megamaker.co/challenge/) shortly after the holiday, in the flood of annual self-help and 2016 resolution articles. The challenge was something I was keenly interested in, then promptly forgot about in the chaos of startup and family life.\n\n[![megamaker-logo-3d](https://images.warpedvisions.org/2016/03/megamaker-logo-3d-300x237.png)](http://megamaker.co/challenge/)\n\n### The 2016 Super Mega Awesome Maker Challenge\nIf you haven't heard of it, the Maker Challenge is a quest aimed at pushing *Makers* to make more. It encourages you to curate a list of your ideas, tracking your progress through the year. Folks serious about the challenge publish their lists too, which keeps them accountable to their goals.\n\nIt's funny: the idea of making a list of ideas public seems so counterintuitive, as in the business of software we under-promise and over-deliver. Talking about something too early can set the wrong expectations, especially as a project changes. I've gotten in the habit of never talking about things before they're almost done, and so I en end up sitting on dozens of ideas for smaller projects that few people hear about.\n\nThe Maker list isn't all about huge things, it's about making and finishing things. The projects are contained and concrete, almost like exercises and challenges. The lists I've seen remind me of what writers often do, forcing themselves to write short stories, or to make a habit of entering writing contests. The idea seems to be about pushing to do something, and to vary what those somethings are. The goal is twofold: both to make stuff, and to be making stuff.\n\nThinking about making and making my smaller projects public is somehow exciting.\n\n### The list starts here\n\nProject #0 was to move the list to a Google doc:\n\n[2016 project list](https://docs.google.com/spreadsheets/d/1I8nIHImymyzu4gVrq2I2-btn_Dnp5GmWvLDdzzqzeYA/edit?usp=sharing)\n\nI will update the list as I work through it. I'm using the list to obsess over making stuff, tracking ideas, and getting motivated to do.\n\n#Weblog\n","tags":["Weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0}],"images":["https://images.warpedvisions.org/2016/03/megamaker-logo-3d-300x237.png"],"paid":false,"full_post_url":"","views":420,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"zatoj19j559wz432","slug":"unicorns-and-the-shifting-landscape-of-computing","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2016-04-03T23:25:15Z","updated":"2022-02-18T00:25:31Z","title":"🦄 Unicorns and the Shifting Landscape of Computing","body":"I've noticed an interesting shift in computing over the last few years. It's one of those changes that becomes obvious in hindsight, though while in the moment it was confusing and disorientating. It turns out I was blinded by my own path of coming up in the industry.\n\nI'm never surprised when a bias gets in the way of seeing something. It's a constant of human progression and the fundamental reason we *science*. We're aware of our limits, and we pursue knowledge from the perspective of disproving ourselves so that we can uncover the truth despite the limits of our ability to observe and think. Science is cool.\n\nThat same set of filters are much more difficult to apply to industry trends, as the facts are fluid, and the reasons for those facts are based on a complex set of interactions between people (who themselves are gooey masses of crazy).\n\n### The search for sparkles ✨\n\nFinding talent in computing has always been difficult. There is a [large gap](http://cacm.acm.org/blogs/blog-cacm/180512-is-there-a-10x-gap-between-best-and-average-programmers-and-how-did-it-get-there/fulltext) in how well people perform while building software, where one developer can be between 5 and 10 times more productive than another. Individuals may also perform better or worse depending on how they fit into their team, and how they mesh with the software stack in use. Measuring these differences in interviews is difficult.\n\nI've used a number of tools when interviewing developers and have found what most researchers have found, that standard measurement tools like brain teasers [aren't really that useful](http://www.newyorker.com/tech/elements/why-brainteasers-dont-belong-in-job-interviews). I've used written tests, whiteboard tests, [brain teasers](http://www.nytimes.com/2013/06/20/business/in-head-hunting-big-data-may-not-be-such-a-big-deal.html?pagewanted=all\u0026_r=0), and even off-the-wall questions when interviewing people. I found that the standard tools failed to gauge actual job performance, rather it measured the ability for people to perform in interviews.\n\nI have found a few less rigid techniques for measuring potential hires, mostly in gauging trajectory and passion. Is the developer excited about learning? Are they excited about making software? Do they actually do both of those things? Combined with the standard do-they-fit-who-we-are gut reaction, I've been moderately successful in finding some great people.\n\n### ⛰ The landscape is not a constant\n\nNow this is where it gets interesting. I've been interviewing and hiring for almost 20 years. I have accumulated a bunch of questions I ask people. And while the technologies I talk about have changed, I have always expected certain skills and behaviours from specific levels of software developers. In terms of soft skills this has been very successful, but recently I've noticed that the hard skills have dissipated.\n\nThis Spring I've been hunting for a few [senior developers](http://betakit.com/startup-job-spotlight-senior-full-stack-developer-at-lemonstand/). I've talked to dozens of incredible people, but have been confused by the lack of experience in system design techniques. Looking back I noticed signs of it years ago, though in recent interviews it's a set of skills that have mostly disappeared.\n\nWhen my own perspective fails me, I look to other pillars of the local scene. I talked about it with a [good friend](http://www.allenpike.com/2016/systems-design/), asking him if he had noticed the shift in any of their recent hires. He's also seen a lack of system design understanding. We emailed back and forth for a few days and came up with some plausible reasons for the gap.\n\n### ✨ Sparkles become more rare over time\n\nWe agreed that skills like system design are (and should be) more rare now than in the 90s. There are a bunch of reasons for this, but mostly it's the result of faster and larger computing resources, combined with tools that are much more capable. While this seems very obvious in retrospect, it was blindingly difficult to see while interviewing people.\n\nMost software development problems in the 90s required some amount of system design. Resources were usually constrained by some aspect of the problem, and tools like capacity planning and careful plotting around the inherent system limits were absolutely necessary. Junior developers had to learn these design techniques to progress to mid-level developers. Senior programmers taught these skills, and were responsible in the many cases where planning failed to foresee limits that blocked the project.\n\nAs the industry matures, the risk of failure due to limited resources decreases. Additionally, the tools have progressed, reducing another common friction from 20 years ago. There are fewer times when system design is required by every team member.\n\nAnd as hardware, tools, and the industry mature further, the business of software evolves with it. Many businesses now focus on little-a-agile techniques, which are iterative and fast. We call it *moving fast*, which is no longer the desperation of the Valley startup, but a viable approach to building software. It wasn't possible in previous eras of computing, as the technical risks required moving slowly. As those technical hurdles melt away, early startups are freed to obsess over features and utility instead of spending all of their time on figuring out if the problem is soluble at all.\n\nWe of course still do system design, though there are fewer people that need to learn it. Businesses can hold off on system level design until they're scaling, as the risks justify the tradeoff in development speed. It's a crazy and wonderful time to be in computing.\n\n### 🦄 Unicorns see other unicorns 🦄\n\nNow the question remains: how was this shift in computing knowledge surprising? I came up in the industry at a time when most of the problems required careful systems design. My [incredible mentor](http://www.cs.ubc.ca/timeline/node/82) came up in the proterozoic era of computing, where even the smallest of problems required careful design. I learned to think about software in terms of capacity, data, and flow first, using diagrams to think and communicate more clearly.\n\nToday? Most mid and senior level developers can work through problems with less rigour. There is less need to understand how the engines work, and there are many problems that the current generations of developers will never need to think about. Questions about systems planning, measurement, and design are above the experience of these generations.\n\nDeep knowledge has shifted up over each generation of developers and designers over the last 50 years. Deeper design knowledge is now relegated to unicorns and architects. And that's okay. We'll still use it, and we will continue to teach it as deep understanding always pays off over the long term.\n\n#Weblog\n","tags":["Weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0}],"paid":false,"full_post_url":"","views":410,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"47maoi57pm8j2x2s","slug":"the-fight-for-clarity-and-beauty-in-writing","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2015-12-02T20:51:49Z","updated":"2022-02-15T20:53:29Z","title":"The fight for clarity and beauty in writing","body":"I’m not old yet, but I’m becoming a curmudgeon. I even love the word [curmudgeon](https://www.grammarphobia.com/blog/2013/12/curmudgeon.html), it’s a word that sounds like its meaning, with a spelling that feels all pissy and annoyed. It’s a word of mystery, and we know very little about its origin. It’s an interesting word, and interesting is good.\n\nI’m not a writer by trade. I write of course (we all do these days), but I’m not a professional. Despite this, I feel a strong connection to our language, I feel a need to savour words and protect how we use them. I feel uncomfortable when I see writing that wanders into the safe, passive, and bull-shitty mess that I see regularly in marketing and business. It’s a lesser language: it communicates poorly, using more words, and with less inspiration.\n\nIt’s not purely a problem of passive phrases and dash-encumbered-words either. It’s a pattern that strips the passion out of what we’re saying. Maybe it’s a way of thinking that plays it safe, a way of writing that follows conventions that are easy (but weak), or a lack of editors calling us out on our shitty work. Regardless of the cause, the fix is easy: write, throw most of it out, and write some more. Pull out the crap, work harder to write honestly, and try to say things that make people feel something. Or, just maybe, perhaps, shut up for once?","tags":[],"paid":false,"full_post_url":"","views":320,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"c0popgvzvenr8d46","slug":"things-that-make-your-podcast-much-less-annoying-to-listen-to","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2015-12-02T00:17:00Z","updated":"2022-02-18T00:17:17Z","title":"Things that make your podcast much less annoying to listen to","body":"I have tried to love podcasts for a few years now. There are several that I like, but I find it difficult to listen to any of them consistently. I'll binge listen for a few weeks, but for whatever reason I get stuck and move on to the next show.\n\nThere are a few things that podcasts do that frustrates me:\n\n- Low quality production\n- Shows that go too long or that ramble\n- Shows that take long hiatuses\n- Surplus of opinions and deficits of facts\n\nI admit that part of the problem is the way I find, consume, and collect shows. iTunes isn't great for discovery or browsing. It does well enough at distribution, but the store is still too monochromatic for the social aspects (*shut up, Ping*). I end up hopping between sites to find shows, to check in on show statuses, and eventually I just don't remember to do those things. I have lost contact with a few shows due to issues with iTunes or my podcasting apps.\n\nI know that the platform will improve, so I can live with the fragmented social, news, and show information bits. I can also live with gaps in production (TV and Netflix have me trained to binge and wait). What I can't learn to love are the crappy production things. I discovered that there are specific formats that work way better for my brain: shows that are carefully cut, curated, and polished are the ones I consistently enjoy.\n\nThere are a few podcasts that are carefully *produced*, which makes a world of difference.\n\n## Things that are important to keep me interested in your show\n\n- *Planning and research* keep a show focused and factual. Opinions are interesting, but facts to back up the gut-feelings are way cooler.\n- *Production values* can turn a so-so show into a good one. Intros, theme music, nice cuts, carefully considered segments and lengths are a few of the things that stand out in the shows I like.\n- *Flattering and interesting material* is better than incredible guests. I recently listened to an interview with one of my childhood heroes; the audio quality and interview focus was so poor that I lost some respect for the show and my childhood hero. I would have preferred not to hear the botched interview.\n- *Broadcast chops* matter. I can live with following a podcast through to maturity, but the people involved should be studying and improving. Simple things like excessive filler words (\"Uh, ah\", and \"like\") and low quality audio-capture really subtract from the experience.\n- *Shorter is way better* for some reason. Cutting out the boring parts and keeping the conversations focused keeps me listening.\n\nThe balance of production quality, focus, and length are the attributes that make the most difference to me. Facts are a close second as opinions get old quickly, and facts are so easy to check.\n\n#Weblog\n","tags":["Weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0}],"paid":false,"full_post_url":"","views":498,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"j83b3v9nuoa2wiuq","slug":"lego-prints-block-printing-without-carving","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2015-11-10T23:32:52Z","updated":"2022-02-17T23:33:11Z","title":"Lego prints: block printing without carving","body":"We tried something new on art day recently: printing with Lego. It has potential, even if it's a bit of a pain to clean up.\n\n![](https://images.warpedvisions.org/2015/11/P1120791.jpg)\n\n![](https://images.warpedvisions.org/2018/11/P1120814.jpg)\n\n#Art #Weblog\n","tags":["Art","Weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0},{"hashtag":"Art","slug":"art","title":"art","post_count":0}],"images":["https://images.warpedvisions.org/2015/11/P1120791.jpg","https://images.warpedvisions.org/2018/11/P1120814.jpg"],"paid":false,"full_post_url":"","views":404,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"mm8l4zbwce0jkiqe","slug":"thinking-in-diagrams-a-developers-guide-to-learning-to-love-drawing-design","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2015-04-14T23:19:27Z","updated":"2022-02-18T00:19:56Z","title":"Thinking in diagrams; a developers guide to learning to love drawing design","body":"I find that software developers struggle to sketch diagrams of their software. They get lost in the specifics of diagraming techniques, in choosing from the many available tools, or in the futility of drawing diagrams at all. I understand their pain, as there are many standards for diagrams and many (often obtuse) tools for drawing with. It's not very motivating to have a sea of choices, none of which looks particularly appealing.\n\nI think about software design by diagramming and writing. The act itself improves the result. It forces me to decompose and organize the problem, and attempt to explain it back to myself. I have always been able to think about software through this process of sketching, refining, and describing diagrams, even when I didn't know anything about what was standard or what should be done. I started by doing what made sense to me.\n\nOver the years, I found that people's milage varied with my diagrams and documentation. Sometimes a diagram would communicate clearly and other times it would baffle. I took the time to figure what I didn't know, reading and trying pretty much everything I could get my hands on. And oddly enough, many of my earliest diagrams were the most useful, before I started to adopt the more specific technical styles. Why was that?\n\n## There are many paths, many shoes, and many feet\n\nThere are as many diagraming standards as there are development languages. There is a common subset that is much more manageable, but it's still easy to get lost in the choices if you don't have an understanding of what the history and classifications are. It's easy to be fooled too, as even an obtuse way of drawing will start to make sense to you if you practice it often enough.\n\nOne of my early mistakes was using diagrams that didn't suite the audience, the problem, the level of detail, or even my way of thinking. A great example was when UML became popular. I drew all sorts of architecture and design diagrams using its parts, and for my own thinking it was fairly productive. But I found that these diagrams communicated poorly, as they captured the wrong level of detail for many types of conversations. They also missed other details that are important in higher level thinking about a system. It wasn't just a problem with UML, I was applying it poorly too.\n\nIt turned out I was focusing on the trees before the forest. Much of UML is, for example, great for showing the precise details of things. These detailed schematics don't always show the hierarchical or proportional relationships well, but in terms of the finer aspects of design they are great. But try to use a class diagram to explain how a larger system functions and you'll be losing out on all sorts of important hints and cues.\n\nNow if you're detailing the design of a class library, or the interactions of a protocol, then many of the UML diagram types are great. If you're discussing features and architecture, you'll be missing important parts of your story. You need to understand what you're trying to capture and communicate before picking a style of diagram.\n\n## Designing chopsticks, a completely trivial example\n\nLet's take a simple problem of design: how do chopsticks work? We can imagine them as a mechanical problem, as a software service problem, or as a manufacturing problem.\n\n![chopsticks](https://images.warpedvisions.org/2015/03/chopsticks.png)\n\nConsider the humble utensil: chopsticks. Two pieces of bamboo, plastic, or steel. Tapered. Textured. Packaged. Done.\n\nIf we were defining how to build chopsticks, we might describe what they were made of; their length, their properties, or their use. If we were coding up a chopstick abstraction for our latest game, we might draw their properties, or relationship to other utensils, or their data storage. If we were selling a web service that provided RESTful chopsticks, we might show their architecture or APIs. If we were Apple, we might describe the detailed manufacturing process that makes them what they are.\n\nWhich style of diagram would help you come up with a design for some choice chopsticks? Which would help you build them as a web service? Which would help you explain their purpose to your customers?\n\n### Feature diagrams\n\nWe could define chopsticks in terms of their utility:\n\n\n![chopsticks-venn](https://images.warpedvisions.org/2015/03/chopsticks-venn.png)\n\n\nOf course this is a Venn diagram, a joke (and a bad one at that). Feature diagrams are often nonsensical, as they show features in boxes and circles. They're meaningful in terms of showing features and their relationships, but are certainly not something you could build software from.\n\nFeature diagrams are useful, however, especially to users who want to understand your product. Finding a visual language for the people who use your software is important, as it can simplify your documentation and support. It lays a foundation of icons, flow, and terminology. Users think about what they need from the software and what they create with it. Helping them think in the language of your software can make it easier for them to become productive with it. This is good.\n\n### Composition diagrams\n\nOr, we could define the constituent components of chopsticks:\n\n\n![chopsticks-comonents](https://images.warpedvisions.org/2015/03/chopsticks-comonents.png)\n\n\nThese are great diagrams for understanding the gravity of features or components. It could just as easily represent the types of languages or services used, or the number of types of data in the system, or the composition of the user base.\n\n### Functional diagrams\n\nOr we could define how chopsticks work mechanically:\n\n\n![chopsticks-function-venn](https://images.warpedvisions.org/2015/03/chopsticks-function-venn.png)\n\n\nI use mechanical style drawings for thinking through states, sequences and componentization. This diagram, of course, is a silly summary of states in Venn form.\n\nFunctional diagrams allow you to use space and size to define how components relate. Lines and arrows can show flow, and containment can show composition. These mechanical drawings have standard forms in UML and various architecture standards, so it's worth reading up on what's done elsewhere if working with teams familiar with specific diagramming standards. You're also free to forge your own way with these diagrams, though they will work better if you rely on at least a few familiar conventions.\n\nFor sketching, obviously, you can pick and choose what works best for you. This is mostly how I think in design. I love to draw software and interfaces in terms of machines and ad hoc drawings. The freeform style is fast, expressive, and fun. These are important attributes for thinking in.\n\n### Architecture diagrams\n\nNow if we were building chopsticks as software, we could define their architecture:\n\n\n![chopsticks-architecture](https://images.warpedvisions.org/2015/03/chopsticks-architecture.png)\n\n\nI *love* architecture diagrams. They represent the polished, high level thinking about a system. They look a lot like things you'd see in marketing materials, high level enough to be approachable, detailed enough to provide insight. You might not be able to build software directly from such diagrams, but they are great for giving people an overview of your software or service. They are especially useful when bringing on new staff at all levels, as well as showing clients, customers, and investors what you do. They provide a vocabulary for everyone to share, with a spacial sense, both visually and in terminology.\n\nI find that architecture diagrams work best when they borrow concepts from lower level diagramming languages, but simplified and more iconic. This aids familiarity, and provides an expressive way to pack information into the limited format. It also is a way to lead people into your detailed designs, anchoring their understanding in the simpler overview.\n\nI believe high level diagrams are the most important development artifact when they accurately represent your software and its ecosystem. They represent your core values in terms of a defined language, and they map your way through design and construction. Your teams and management run blind without this shared understanding.\n\n### API diagrams\n\nWe could also dive into more detail and define a pair of chopsticks as a web service API:\n\n\n![chopsticks-api](https://images.warpedvisions.org/2015/03/chopsticks-api.png)\n\n\nAPI diagrams are spacial maps of your web service components and their namespaces. They are a lower-level slice of functionality specific to the web, but similar to component diagrams. These diagrams extend the vocabulary of your software, and decompose it into spheres of influence, and layers of implementation.\n\nI also love API diagrams, as they help me think about what goes where, and about the actions and data. Thinking about decomposition is helpful for finding holes in your understanding and for finding organization before you build out the system (or when adding to it).\n\nThere are many standard diagram styles for component diagrams, depending on your audience and specific purpose.\n\n### Lower level diagrams\n\nAs we continue to describe each part of a system, we find our way to lower level diagrams. These include things like:\n\n- schema diagrams (ERD, for example) \n- component and library diagrams \n- class diagrams\n\nWe also start to wonder about how these pieces interact, for which we use lower level sequence, state, and transition diagrams. Tables are also useful for states and transitions, and I have found no single approach useful for all types of detailed planning.\n\n### And everything else\n\nWhen considering interactions we use wireframes, information hierarchies, sites maps, user interface mockups, and so on. These diagrams are just as important, and should also share pieces of your visual design language.\n\n## My path through the forest\n\nI have applied many types of diagrams to various stages of the design and development process. Some have worked and others have not. Part of my learning had me figuring out what worked for my own exploratory thinking and part of it had to do with finding out how to improve what other people understood of my designs. Some of the challenge was in the type of diagram used, some of it in the level of detail, and some of it in the style applied to the drawings themselves.\n\nIf you look at my simplified examples you'll see a few common themes:\n\n- a shared and expanded terminology, \n- a shared and expanded set of shapes, \n- a shared and expanded set of colours\n\nI tend to vary the colours and shapes in my design diagrams, though there are common themes. For example, I tend to use icons from standard diagramming languages in higher level diagrams. I also tend to pick fonts and colours that suit the domain or product branding, to bolster familiarity and ownership of such things. I also pack in a bit of humour, where appropriate, to keep people alert and enjoying themselves.\n\nI find that these elements translate nicely to pencil sketches and whiteboard discussions too. If you start to work on a language for your software, your entire team will gain from the tools you have provided for them. They will be able to leverage existing definitions and extend them with their own design details.\n\n## But making diagrams is difficult\n\nNavigating through the universe of diagramming techniques and ways of applying them is in itself a huge undertaking. Add to that the difficulty in recording and producing attractive diagrams and you have a task that seems impossible.\n\nI'll let you in on a secret. It's really very simple. You just draw. Keep drawing, enjoy it, learn your tools, read a bit, and before you know it you'll be thinking visually.\n\nSo how do I produce diagrams? Is there a magic tool that will save us all?\n\nI learned dozens of tools before I realized there was no perfect tool. Today I still use a variety of tools to translate what I see in my head to paper (and I, of course, also use paper).\n\nAt first learning multiple tools seemed counterintuitive. It felt like a waste of time. I mean, why learn several tools when I could learn one really well? It turned out that learning various tools taught me the fundamentals of drawing in a way that makes it simpler to use any drawing tool. It gives me choice, dexterity, and a richer palette to work from.\n\nThe principles of making technical drawings are simple, once you realize there is no magic. You just do it. You work around the limitations. You nudge things by hand. You use what the tool does well and ignore what it doesn't. For me, I would get frustrated with a tool and quit, when I really should have been frustrated at my lack of own lack of persistence. Stopping only guaranteed my failure.\n\nIncorporating diagrams into documentation can also seem tedious. Given time, however, I found that you just do it. As my agility improved, the cost of the tedium went down. I also have a stronger vision of what I want in my head and I use that to brush off the more annoying aspects of the process. Eventually the annoying parts fade away, and you just make stuff.\n\n## Well that was long winded\n\n### TL;DR\n\nDesign is difficult at first. Too much choice, too much to learn. But, it boils down to a few principles:\n\n- use a level of detail matched to the audience,\n- work your way down in detail (not up),\n- develop your own visual language, using the blocks and techniques that exist,\n- stop complaining about how difficult the tools are already,\n- and just do it\n\nIn the end, defining a way to talk about your design is more important than what you don't know. Your design sketches will unify how people think and talk about your software and will lay the groundwork for to extend and improve the things you build. The learning will also speed up your own thinking about design and improve the polish of what you build.\n\n#Weblog\n","tags":["Weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0}],"images":["https://images.warpedvisions.org/2015/03/chopsticks.png","https://images.warpedvisions.org/2015/03/chopsticks-venn.png","https://images.warpedvisions.org/2015/03/chopsticks-comonents.png","https://images.warpedvisions.org/2015/03/chopsticks-function-venn.png","https://images.warpedvisions.org/2015/03/chopsticks-architecture.png","https://images.warpedvisions.org/2015/03/chopsticks-api.png"],"paid":false,"full_post_url":"","views":582,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"ap3s5wqsmyhy8p88","slug":"the-quest-for-focus","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2014-12-30T00:11:00Z","updated":"2022-02-18T00:11:23Z","title":"The quest for focus","body":"As designers, software developers, and business geeks we thrive on a few things. We seek inspiration. We obsess over details. We work long hours. And we need *focus*.\n\nComputers and software have evolved to the point where nearly anything is possible. It's an amazing threshold, as we are rarely limited by the hardware, OS, and languages. We're mostly limited by our own ability to produce. We are the weakest link in our productivity.\n\nEnter the era of *focus* applications. We've seen focus tools over the years, but the market has matured and there are dozens of tools available to help our focus.\n\n## Hocusfoc.us\n\nOne such tool is [Hocus Focus](http://hocusfoc.us). It is a simple tool. It minimizes applications that you're not currently using after a fixed timeout. *That's it*.\n\nIt's an interesting way to work. I usually have several windows open at once as work, ideas, and life are interruptive. A tool like Hocus Focus lets the interruptions happen, cleaning up after the chaos.\n\nHocus Focus may not be an every day tool, so it lets you disable it when you're working on something that requires a bit of mess. It also lets you customize the timeouts in a few ways, in case you have applications that need to be more persistent.\n\nDoes it work? I think so. Application disappearing takes a bit of getting used to (a fade might be better), but once you stop noticing applications dropping like flies you're left with a desktop that is more *focused*.\n\n#Weblog\n","tags":["Weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0}],"paid":false,"full_post_url":"","views":413,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"kepcxkor0dpxm2ak","slug":"full-circle-or-why-im-abandoning-my-custom-cms-and-using-wordpress-again","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2014-12-12T23:17:09Z","updated":"2022-02-17T23:17:45Z","title":"Full circle, or why I'm abandoning my custom CMS and using WordPress again","body":"As a software designer, I love to design software. As software developer, I love building software. When I dream of better things, I funnel my ideas into new projects. When I don't have time for all of my side projects, the projects pile up in a corner and gather dust. And when a side project is an unfinished publishing platform it gets in the way of writing.\n\nI'm intensly interested in writing and publishing on the web. There are just so many possibilities for saying interesting things and making the presentation of those things more useful. I've dedicated a chunk of my [consulting time](http://napkinware.ca) to making beautiful interactive sites for non-profits, and I use a slice of my spare time for maintaining a number of my own sites (and those of friends and family). I believe that what we're seeing on the web today is a shadow of what we will publish in the future, and it excites me.\n\nMy love for writing and publishing led me to building my own minimalist tool. [Chronicle.md](https://github.com/robotpony/chronicle.md) is a Markdown app written in PHP. It works as well as a first version needs to work, but it isn't productive enough yet to invite me to write daily or weekly. It requires twiddling and poking to get posts out, and it doesn't support any of the common publishing APIs. And as it's not at the top of the pile of awe inspiring ideas, it's not going to get those features any time soon.\n\nAnd when I weigh the importance of building a better tool with my need to write, writing wins.\n\nSo I'm back to WordPress. It's a reasonable tool, with a vast, stable API, with hundreds of tools and plugins to make it sing. And as I've built hundreds of custom themes for it, I can spend some of my fun development time making WordPress better.\n\n## The straw that broke the developer's ego\n\nThe tipping point this time around was the simple lack of writing apps that supported my custom tool (hint: this number was 0). As I have been itching to try [Desk.pm](http://desk.pm) (a writing tool that supports CMS's like WordPress), and as I have been publishing sporatically, it was time for a change.\n\nNow I can dream of ways to make my writing *flow* better, instead of building everything at once. This fits the character of side projects better, as I can take bite sized problems, related to my writing needs (or my client's needs), and solve them really well. It's all about focus.\n\nIf I do decide to build a CMS in the future, I will make it my main gig, instead of trying to fit it inbetween the other stuff. Letting side projects interfere with your flow is a sure sign that the balance is wrong.\n\nIn the interim, when I get the itch to invent a new CMS, I will aim my powers at trinkets, plugins, and themes for WordPress (and other CMS's).\n\n#Weblog\n","tags":["Weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0}],"paid":false,"full_post_url":"","views":233,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"woo41hj19tme71y3","slug":"the-road-to-and-from-and-hopefully-back-to-simplicity","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2014-05-02T23:12:15Z","updated":"2022-02-18T00:14:25Z","title":"The road to and from and (hopefully) back to simplicity","body":"![](https://images.warpedvisions.org/ms-basic-atari.gif)\n\nI wrote my first computer program when I was 8. It was a simple adventure game written in BASIC, a mess of `GOTO` and `PRINT` statements. I saved it to tape a few times, proud enough of my first creation that I didn't want to lose it. And despite what I didn't understand my mind exploded with ideas.\n\nI continued to write games and curios into my early teens. I wrote text adventures and arcade ripoffs. I hacked at biometric data collection using a busted set of paddles and mixed mode graphics. I designed and built a large (but clunky) side scrolling adventure game using only a set of customized fonts. I plagiarized code from magazines and hacked at my machine until the wee hours of the night.\n\nI learned almost nothing about writing production code in my early years. And while discovered that I loved to imagine and build things in code, I barely brushed against the principles that would later be required to make real learning possible. My skills didn't improve much either as my time was largely unfocused.\n\nI was a hobbyist. I discovered the joy and love of software, but entirely missed the nuts and bolts of it. I didn't learn anything about the science, the skills, the mechanics, or the business behind software, which limited how much I could learn and improve. It's a limit that prevents most of us from eclipsing hobbyist, even those who end up making a profession of it. Failing to escape *hobbyist* damns you to a shallow relationship with understanding.\n\n\u003e \"You want to know how to paint a perfect painting? It's easy. Make \u003e yourself perfect and then just paint naturally.\" \u003e [#](https://en.wikipedia.org/wiki/Zen_and_the_Art_of_Motorcycle_Maintenance)\n\nBut it's more than just knowledge. After you discovery where to start learning the right things, you must then endeavour to follow it with practice. Failing to practice leads to a lack of reinforcement and eventual atrophy.\n\n## A sideways journey\n\nI shied away from computers as high school progressed. I was bored with my slow progress and was naturally gravitating away from solitary activities. Instead, I spent time with friends and worked in various menial jobs. I enjoyed working too, especially in restaurants where I was making food with my hands (even fast food).\n\nI made my way to college, and wandered through it mostly without direction. I passively avoided computer science, though I found myself programming in various capacities anyways. I wrote software for restaurants, built data analysis code for agriculture and biology courses, and coded simple tools for print operations. I was still sure that I wasn't a programmer, so I continued working in restaurants and studying anything but computer science.\n\nI also considered myself an artist at the time, even though I spent very little time being artistic. I would binge on art from time to time, especially enjoying block printing and photography. I also enjoyed sketching, though I never reached the escape velocity required to do much more than doodle icons and simple caricatures.\n\nIt was around this time that I realized that I wasn't really very good at anything I did. I mistakenly suspected that I wasn't trying hard enough, so I doubled down on my studies and changed my major to computer science, as it seemed somewhat inevitable.\n\n\u003e \"The truth knocks on the door and you say, \"Go away, I'm looking for \u003e the truth,\" and so it goes away. Puzzling.\" \u003e [#](https://en.wikipedia.org/wiki/Zen_and_the_Art_of_Motorcycle_Maintenance)\n\nUnfortunately, trying harder was a vague proposition, and I found myself bored when my lack of skill eclipsed my need to produce useful software. I did well in my studies and project work, but I didn't really learn how to write software despite writing quite a lot of it.\n\n## A first glimpse\n\nI developed a schizophrenic relationship with making things though college. My mind would race at the prospect of building something, excited to get started. I would enjoy the tedium of construction and I would revel in finishing. But at some point in every project I would realize how far from great it was.\n\nI tried to ignore the reality: I didn't enjoy thinking about how much I didn't know and how limited my abilities were, even though the thinking about those things would have pointed me toward improvement sooner. I continued along a superficial path of creation for many years. It was a dichotomy that would follow me for some time, the excitement and passion for making things, and the inevidable disappointment of knowing they weren't great.\n\nI continued meandering through college, bored with my classes and part time work. I left my program early for an opportunity to work in the real world, hoping that it would nudge me out my rut. And it did.\n\n\u003e When you want to hurry something, that means you no longer care about \u003e it and want to get on to other things. \u003e [#](https://en.wikipedia.org/wiki/Zen_and_the_Art_of_Motorcycle_Maintenance)\n\nMy first few years as a full time professional were liberating. I was working as part of a team where my lack of skill and knowledge were no longer limiting. We were given simple, defined problems to solve, mostly tied to specific customer support requests. The team was knowledgable, at least in terms of how to solve specific problems, so I was able to start and finish projects quickly and with some quality.\n\nSmaller, more defined work was the first step to successful practice. Our time was limited by customer deadlines, which forced us to keep our approaches and designs simple as well. Combine small and simple with compiled languages, and we kept the code clean too. This principle drilled a few things into my head that were important, though I wouldn't fully grasp them until later.\n\nThis first real software job was important in another way: it showed me how little I knew. Both through the practice of churning out a release every few weeks and the fellowship of our early staff I came to realize that I was still just a fledgling in the craft. And as luck would have it, the employer embraced continued learning and they graced us with a very ample book budget. I spent every penny I could of that budget, and read every book cover to cover numerous times. I felt like I was finally learning.\n\nOf course I had already learned more than I realized, but by this time I had some experience and perspective. My experience helped me focus the time I spent learning, and it helped me filter the learning materials too. Both focused time and quality inputs are important for learning, as is having enough perspective to see the value in what's being learned.\n\n## Clearer motivation\n\nAfter my first few years as a professional I became aware of how making things affected me. I learned that when I made something the experience was deeply satisfying. And as my results improved, the experience was better. In short, making things felt good. Getting better at making things felt incredible.\n\n\u003e \"Logic presumes a separation of subject from object; therefore logic \u003e is not final wisdom.This is Zen. This is my motorcycle maintenance. \"\n\nThere is a problem, however, with associating satisfaction with making, especially when it's your profession. Sometimes you are forced into unsuccessful projects, either through simple missteps or through external pressures. When we are attached to the our successes, our failures become part of us too, and we suffer emotionally and physically.\n\nOver the years I've had to fight the attachment to the things I make. On one hand there is great satisfaction in the process. On the other hand the failures eat away at who you are. Conflating satisfaction with value is an expensive mistake that I'm only now learning how to avoid.\n\nI am neither my success nor my failure, nor am I the journey. In the end I am who I choose to be, in how I allow the experience affect me, and how I perceive the journey itself. I'm not suggesting rose-coloured glasses, rather that you accept the reality (whatever it be) and choose who you become (or who you don't become), without prejudice. This plays for both success and failure, and for the things in between, as lot of what we do in computing is on the long road between inception and shipping.\n\n## The sum of the parts, mostly\n\nI look back on those early successes when I get lost in software development. I also look back on the time when I started to understand learning as a reminder of what I can do when the inputs and circumstances are just right. These experiences help me find my way back to reality, inspiring me, and reminding me what can be done.\n\nLooking back on some of my earliest, successful projects also gives me a sense of perspective, one I could not have found at the time. Those early projects were not as bad as I thought they were. They were a balance of pragmatic, functional, and creative (at least the ones I remember). I often find myself wishing I could find that balance again, a balance that I was forced into by my lack of knowledge and experience, a balance that is now more difficult to find.\n\nSome of our art is in learning how to learn, learning how to practice and hone our craft, and in exercising our experience and knowledge. The craft is also in finding that child-like simplicity, where the balance hinges on the limitations more than the infinite possibilities, and where that youthful passion is clearly seen in the things we make.\n\n#Weblog\n","tags":["Weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0}],"images":["https://images.warpedvisions.org/ms-basic-atari.gif"],"paid":false,"full_post_url":"","views":368,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"7l1anntlkli16ywh","slug":"the-art-of-code-review","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2013-06-30T22:53:23Z","updated":"2022-02-17T23:53:56Z","title":"The art of code review","body":"I review a lot of code these days. It's an incredible way to nudge a team of bright people toward greatness. It allows me to look at problems from the outside with a perspective of experience and distance from the low level design. The perspective is important too, and I see things that I often miss in my own code. You see, we're easily blinded when we're too close to the problems we're trying to solve.\n\n\u003e A change in perspective is worth 80 IQ points. [--- Alan Kay](http://en.wikiquote.org/wiki/Alan_Kay)\n\nThink of it like this: walk up to the front of a large building. You won't be able to see around it anymore: the roads leading away from it are obscured, and the metropolis surrounding it is dwarfed by its stature. Your perspective limits you.\n\n#### Rule 0: no one has immunity\n\nI require review for most code that comes from my teams, including my own. [Github](http://github.com) pull requests are a great tool for this, as you package up a change, relate it to a bunch of tracked issues, and open it up for peer review. It allows you and your team to comment, iterate, and accept *or deny* each patch. There are lots of other ways to do this, of course, but the mix of branching and discourse is brilliant.\n\n#### Rule 1: reviewed code is always better code\n\nYou don't have to review all of the code produced by your teams, but it is incredible value for the effort. It's far easy to bump design and learning along in small steps, and far cheaper too. There are fewer surprises, fewer rewrites, and a much easier learning curve for everyone.\n\nI can review code for a few teams of developers, given a mix of skills, in a few hours a day. That includes time to talk over issues with individuals and group whiteboard sessions. The code review leads to design review, and a solid understanding of where your teams stands on a daily basis. Getting the team productive gets you to shipping.\n\n#### Rule 2: develop simple ways to sample code\n\nUnderstanding every line of code is difficult, especially given the chaos that creeps into the daily life of a team lead. Even after taming the chaos you still need to find ways to focus on code in ways that finds the important holes. How do I do this? Simple heuristics, or in other words: rules for finding crap.\n\nFor example, when reviewing anything in Python, Ruby, Perl, or PHP, I look for programming conventions from other languages. Parsing strings using `strpos`? Is there a better way in the language? Is there a faster way? Is there a cleaner way? I call this: **alien syndrome**. It's easy to spot, and even though it's sometimes the best solution, it's more often a sign of a developer who has failed to really understand the language. A sign that they're limiting their thinking to what they know and not in the potential of the tool at hand.\n\n#### Rule 3: write down your rules and philosophies\n\nWrite your rules and style guidelines down and share them with the team. Make them into manifestos or a top-`$n` list. Have fun with it.\n\nHere's my 8-bit list for reviewing code:\n\n1. *Alien syndrome* - the code uses a convention or mechanism from a different style of language. C-isms in Python? That's weird!\n2. *Exception litter* - a function spreads its error cases throughout larger algorithms. Is the data unreliable? Failing early seems more humane than dragging it out.\n3. *In-and-out buggers* - the code mixes generation with logic. Can the logic be split into something more easily tested? Can the generation be split into some sort of adapter or template?\n4. *Elbow-itis* - the design or code has several elbows. Does the complexity of the code or design fit the complexity of the feature? Not!\n5. *Inconceivable* - language or library functions used in odd ways, or where much better mechanisms are available with a bit of searching. Do the functions do what the developer thinks they mean to do? Various uses of `regex` are especially subject, as they represent incredibly dense logic.\n6. *Are we there yet?* - algorithms or classes that drone on well past their welcome. What makes the code so lengthy? The rhythm of the code is much like prose: it should feel good, not boring.\n7. *How DRY I am* - repeated code is stupid. I may be lazy, but testing something more than once is crazy talk. It's also expensive and prone to errors on several levels. Bad mojo!\n8. *Preflight sanity* - code fails the basic mustard: neat, tidy, edible, digestible, and food-safe. Loose lips sink ships. Sloppy code is crap. Or, if code can't meet basic minimum limits, then it's likely flawed in other ways.\n\nI add heuristics regularly, based on simple misconceptions, new techniques, or especially creative developers (often including myself). I focus on different types of problems with different developers, and with different types of designs.\n\n#### Rule 4: review should use what people do best\n\nLet the computers worry about syntax checking, enforcing persnickety grammar rules, and testing for large and complex things. Code review does not replace the compiler, the lint tools, the unit tests, the system tests, or the load tests. How could it?\n\nI focus my time on things that I can use to teach better techniques, on patterns I can use to prevent entire classes of problems in the future. In the rare case where there are grievous basic issues, I call everyone to the bat cave.\n\n#### Rule 5: to the bat cave!\n\nSome problems deserve more than one-on-one time or group training. You know the type of problem I'm talking about: that API that's warty and gross, or those SQL queries that are covered in slop. Picking these things apart piece by piece would be painful and cruel. Didn't someone tell you not to pick at the scabby things? No?!\n\nThese loathsome problems require a graft and not just a simple nudge. Solve the problem properly, cleanly, and with some tact. No sense in making it painful or tedious. Write a standard or a guideline, and plan some real time to scour the grit out of the gunk. Fix it up right, and take the fix out of band to the mess it solves. No sense in dragging developers through the mud. Pick them up, set them straight, and show them how to solve the problem properly.\n\n#### Rule 6: there is no rule 6\n\nThere are always problems that don't fit your experience. Roll with it and remember your team is awesome. Support them, look for the long game, and base your recommendations on solid first principles and fact. Keep it clean. Keep it fun. And remember: code review is a form of programming itself. You're encoding your team's success using a simple series of feedback loops.\n\n#SoftwareEngineering #TheArtOf\n","tags":["SoftwareEngineering","TheArtOf"],"categories":[{"hashtag":"SoftwareEngineering","slug":"software-engineering","title":"software engineering","post_count":0},{"hashtag":"TheArtOf","slug":"the-art-of","title":"the art of","post_count":0}],"paid":false,"full_post_url":"","views":321,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"ydxie4gy512ya5ri","slug":"simple-patterns-php-to-javascript","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2013-06-25T22:44:12Z","updated":"2022-02-17T23:55:08Z","title":"Simple patterns: PHP to JavaScript","body":"July 25, 2013\n\nYou can pass data between the client and server in a number of ways. I like to mirror data structures between my server and client, so that I have the same basic data model available in both realms. There are a few ways to do this, including:\n\n- Calling an API that returns `JSON` (or `JSONP`)\n- Calling an API that returns some UI, which can include some `JSON`\n- Getting an entire page that includes your data model in `JSON`\n\nSending a client data is trivial in most dynamic languages, and PHP is no different. You return a response body with the result of a `json_encode` and your data model. The technique works just as well in APIs as it does in standard `HTML` templates:\n\n```\n\u003ch1\u003eSome HTML\u003c/h1\u003e\n\u003cscript\u003e\n    var my_object = \u003c?= json_encode($my_object); ?\u003e;\n\u003c/script\u003e\n```\n\nThe result is a mirror of your server side structure on the client. You should encode your object somewhere else (like in your framework), as you should take care to ensure that the result is valid, but the simplified example shows the basic process.\n\nYou can replace these data objects from the server in subsequent requests too, ether in `JSON` calls or when requesting subsequent chunks of `HTML` (by including the same script tag). The technique lets you keep your client and server model in sync, to whatever degree your application requires. It also helps force your thinking to data structures, which gives you a chance to properly model what your application needs.\n\n#PHP\n","tags":["PHP"],"categories":[{"hashtag":"PHP","slug":"php","title":"php","post_count":0}],"paid":false,"full_post_url":"","views":324,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"1hyx6akufe0162ah","slug":"five-things-to-love-about-php","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2013-06-17T22:20:54Z","updated":"2022-02-17T23:21:08Z","title":"Five things to love about PHP","body":"PHP is a great language. It follows a long lineage of C-based syntaxes, mirroring much of the C standard library. It performs well, is trivial to deploy, and has been stable for many years. And, it's almost universally [hated](https://www.google.ca/search?client=safari\u0026rls=en\u0026q=why+php+sucks\u0026ie=UTF-8\u0026oe=UTF-8\u0026redir_esc=\u0026ei=OLrZUejjJ6KPiAK9-IH4Bg).\n\nWhile many people look down on PHP, it's worth considering where it shines compared to other languages. I find that in many uses, PHP provides a great set of features and elegance. Not only is it competent, but there are places where it is truly a great little tool.\n\nBut first, what's up with the hate?\n\n## PHP is old\n\nPHP has changed over the years. The result is a language specification that has (at times) been incompatible with previous versions. It also has produced a warty standard library, with a large variety of naming and programming conventions. I agree that this should be improved.\n\nOn the other hand, the current language is expressive, and the runtime libraries are vast and rich. Any good code editor will provide auto-complete (and API references). I've found PHP no more difficult to navigate than C, C++, Java, or Ruby, though I'll agree that Ruby is a lot tidier.\n\n## Too much dynamite\n\nAnother common complaint has to do with PHP's automatic dynamic type casting system and how it can be confusing. This stems from versions of PHP prior to 5, though there are still a few edges where the language can be used incorrectly to produce incorrect results. Namely, when comparing dynamic types, take care to read the documentation and use the appropriate casts and operators.\n\n## Library quality, thread safety, and so on\n\nOther complaints include varying library quality (this is a problem in most of the languages I've used), and thread safety (also a common problem). These problems have never blocked anything I've used PHP for over the years, as I use it for problems it fits well.\n\nThere are also other language quirks that frustrate people, things like ternary behaviour, historic security issues, error handling, and so on. My assertion is that, yes, PHP is quirky, but no more so than Javascript or Perl (or many other languages). I find that PHP produces very readable, predictable code for a few specific problems. This makes it a great tool for those problems, despite the hate.\n\n## So what's to love?\n\nIf you can get over the warts, there are many features in PHP that come together to make a solid set of template and API building tools. PHP is designed as a thin veneer over HTTP requests, with enough finesse to build simple, clean interfaces.\n\nMy favourite PHP features:\n\n1. **Dynamic class loading,** allowing you to register your own loader for classes that are requested by code and not found in the current namespace. It makes it possible to handle installation errors nicely, dynamically create modules at runtime, or provide custom loading of nearly any sort.\n2. **Dynamic class accessors,** a feature that allows you to provide class accessors with a single function, making it trivial to provide clean and consistent error messages with a minimum amount of code.\n3. **Dynamic call dispatching** allows you to route class member calls through a single function. This makes it simple to provide a learning interface, one that can probe a remote API and dispatch based on the results. The syntax to the caller is clean, and it implements with only a single function point.\n4. **First order templates.** PHP is a template language at its base. It allows you to represent output in the output's format, hooking to the language with an obvious syntax. With its ability to set the variable namespace, it makes for a rich, performant template system.\n5. **HTTP/CGI at its base.** PHP, when started by a web server, is primed and ready to go. No additional libraries are needed, and very little work is required to parse a request and produce a response. This makes it possible to service web service requests with minimal overhead (though oddly most PHP frameworks do not do so).\n\nThere is more to love too. PHP has a solid set of mechanisms for defining classes and namespaces. It provides interpolated strings and oldschool HEREDOCs. Many of its core features and libraries are implemented in C (and perform well). Given a reasonable amount of discipline it produces predictable, useful code ... about the same amount of discipline required to work effectively in Javascript or Perl.\n\nPHP isn't for every problem. For example, I find that it's a poor fit for shell tools (Bash, Perl, Ruby and Python are much nicer here). It also doesn't scale to huge server side things on its own (Java? Ruby?). And it doesn't have the rich ecosystem of things like Ruby and Rails. But, PHP is a solid tool in my kit, especially suited for lean web things.\n\n#PHP #Software Engineering\n","tags":["Software","PHP"],"categories":[{"hashtag":"PHP","slug":"php","title":"php","post_count":0},{"hashtag":"Software","slug":"software","title":"software","post_count":0}],"paid":false,"full_post_url":"","views":354,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"7sbegz3dvap9icot","slug":"http-get-and-fuzzy-semantics","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2013-01-26T23:28:05Z","updated":"2022-02-17T23:28:26Z","title":"HTTP, GET, and fuzzy semantics","body":"A developer asked me a seemingly obvious question today:\n\n\u003e I have an API `GET` request that requires a `JSON` body. Is that okay?\n\nIt's a good question too. It turns out the answer isn't as simple as it should be. On principle the answer is, \"*No*, it's not cool\". A `GET` is an idempotent request for a resource. You don't request a resource with a resource (what would that mean?), you request it with a *resource identifier*. The `HTTP` spec, however, is unclear on the subject and does not explicitly disallow it (it probably should).\n\nThis developer was using the request body as a convenient way to send a complex set of parameters, as `JSON` is much more useful to work with than `URI` encoded components. His approach was both sane and pragmatic. But, it was also incorrect.\n\nA [few minutes of reading](http://tech.groups.yahoo.com/group/rest-discuss/message/9962) confirmed my take on it: [`GET` requests with payloads are bad mojo](http://stackoverflow.com/questions/978061/http-get-with-request-body). But why is that, though?\n\n## Four reasons why you should avoid payloads GET requests\n\n1. *It's unexpected.* You are not guaranteed that all `HTTP` implementations will treat it in the same way.\n2. *The spec says so, sort of.* Servers could/should ignore request bodies, as they have no semantic meaning to the request.\n3. *It doesn't play nicely with caching.* Many caching layers use the URI as the cache hash. Unless the URI is changing between requests, the payload will not change the result of the request.\n4. *It's disingenuous.* A `GET` request uses a `URI` to name the resource. The request body is irrelevant to that request.\n\nSometimes the simplest questions are not answered by the spec.\n\n## And how does the story end?\n\nThe developer recast the `GET` as a `POST`. The semantic of the request was to retrieve a customized resource based on specific parameters, essentially creating a new resource on the fly based on the given parameters. As the filters were non-trivial, they could not be cast as `HTTP` headers or components of the `URI`. This was a pragmatic fix too (one line in his tool chain).\n\n#HTTP\n","tags":["HTTP"],"categories":[{"hashtag":"HTTP","slug":"http","title":"http","post_count":0}],"paid":false,"full_post_url":"","views":307,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"tj8gbg8d8rio8ms4","slug":"summer-design-fragments","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2012-09-30T22:50:12Z","updated":"2022-02-17T23:56:31Z","title":"Summer design fragments","body":"I've been busy working on visual design bits for work projects this summer. My method is simple:\n\n1. Sketches and storyboards\n2. Static mockups (HTML/CSS, some Javascript)\n3. Live mockups (to test integration and interactions)\n\nUncovering what a feature means is fundamental to the method. It exposes the nouns and verbs of the problem, and hints at the useful metaphors. The freeform nature of sketching and developing storyboards based on this language helps me focus on figuring out what the things mean, as well as finding their shape and rhythm. I end up working on several different approaches before it's obvious which ones are workable for the client and product.\n\nMoving to static and live mockups transforms these ideas into reality. I aim mockups to be as close to production quality as possible, as anything less distracts from thinking and the discussing the designs. These distractions are the worst sort too, derailing any shared thinking on how an interface should be.\n\nThe method is important. It's worth practicing, and I do on a weekly basis (I'm always designing something).\n\n## Recent examples\n\nI haven't posted much ongoing design here, mostly as I haven't been that proud of it (or haven't been the primary designer on the projects). As my hone my craft, and as I work on more interesting projects, I will talk more about my work. This is a good thing.\n\n![Inline bar graphs.](https://images.warpedvisions.org/2012/09/Screen-Shot-2012-09-28-at-4.17.10-PM.png \"Inline graphs\")\n\nThis is part of an updated reporting project. I found that the bold graph elements and combined (and pivoted cell data) improved readability of the table. Realizing that different types of columns had vastly different visual needs (as they were different things) improved the clarity of the data overall.\n\n![Simplified application chrome.](https://images.warpedvisions.org/2012/09/Screen-Shot-2012-09-28-at-4.25.46-PM.png \"Updated application chrome\")\n\nThe simplified application chrome is part of an ongoing improvement project. We're reducing the size of the *chrome* (or *bling*), so that the guts of the application are much more prominent. The previous design had about 35% of the page dedicated to this *chrome*, which is now about 10% of the overall vertical space. We've hit the basic brand colours and shapes, improving the clarity of the product name itself and removing unneeded navigation.\n\n![Smaller, graphicless login.](https://images.warpedvisions.org/2012/09/Screen-Shot-2012-09-28-at-4.24.43-PM.png \"Updated login\")\n\nI've also simplified the sign in form. Nothing revolutionary, but we've reduced the size and amount of noise significantly.\n\n## Learning is doing\n\nThis summer's design projects reinforced a number of principles for me:\n\n- **Process is bullshit.** Method and practice, however, are crucial to execution and skill.\n- **Freeform thinking before structure.** Sketching beats regimented tools for creativity.\n- **Make it real as soon as you know what it is.** CSS/HTML designs look better than sliced or faked graphics, and you can get to testing usefulness sooner.\n- **The little tools and techniques matter.** Icon fonts are awesome sauce. LINT, minification, and LESS improve quality by reducing duplication and effort.\n- **Small design steps are easier to finish well.** Increment methodically. Build testing into your core habits, into your product.\n- **Simpler writing tools result in better writing, and writing really matters.** Simpler tools are better. Simpler editors, markup, and hosting.\n\nHammering at the methodology and practicing each of the individual skills shows results quickly. I'm able to prototype a new set of features in a few days now, assuming functioning creative mojo. Iterating design with shorter design stints makes for more polish. Wax on, wax off, and all that.\n\n#Design\n","tags":["Design"],"categories":[{"hashtag":"Design","slug":"design","title":"design","post_count":0}],"images":["https://images.warpedvisions.org/2012/09/Screen-Shot-2012-09-28-at-4.17.10-PM.png","https://images.warpedvisions.org/2012/09/Screen-Shot-2012-09-28-at-4.25.46-PM.png","https://images.warpedvisions.org/2012/09/Screen-Shot-2012-09-28-at-4.24.43-PM.png"],"paid":false,"full_post_url":"","views":256,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"x032607kphocfuwm","slug":"the-myth-of-uphill","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2012-09-03T23:06:39Z","updated":"2022-02-18T00:06:59Z","title":"The myth of uphill","body":"Friction works against you. It exceeds your ability to progress. It deflates you, stripping your motivation. It's the hill you see before starting a difficult project. It's the gravity that pulls you away when interest wanes.\n\nI'm starting a small project for a client today. It's a simple set of improvements to something I built for them last year, using a toolkit I wouldn't normally use (but one that fit their uses well enough). I had forgotten a lot about the toolkit when quoting on the work, and by the time I remember it's clear that there are challenges ahead of me.\n\nWhen it comes time to start the work I find that I'm stuck. Unmotivated. Paralyzed. I'm staring up the barrel of an uphill battle.\n\nTo get unstuck I need to start moving. I need to realize that the problems are soluble and mostly in my head. And the best way to get started is to do something, anything at all.\n\nSo I work my way around the edges of the harder problems. I simplify development by working on a scratch copy of the project, isolating and reducing the size of each individual piece. I work outside of the warty toolkit and test my work carefully before integrating it. I carefully break my work down into lists of small achievements so that I can make measured progress hourly. Once I get a piece working I test it, and put it up on the shelf. By the time I finish the small bits I'm moving, and I can attack the mountain without distraction and with gusto.\n\nAnd the mountain? It was a projection of my imagination. I thought the work was going to be difficult. I believed it. I didn't feel like re-learning the old, warty tools. I remembered the flaws more than the good qualities. Or maybe it was one of hundreds of other human flaws manifested as part of my fictitious friction. The key was to realize that friction was just a glitch in my perception, that if I shed my perception I could do it, that once I started the work it would be easy. *And it was.*\n\nIn other words: just fucking do it already. It won't be as hard as you think. And if it is, you'll be done before you realize it.\n\n#Weblog\n","tags":["Weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0}],"paid":false,"full_post_url":"","views":278,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"hdj5l3tv55xlimfg","slug":"simple-sets-in-javascript","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2012-05-29T22:47:12Z","updated":"2022-02-17T23:49:02Z","title":"Simple sets in JavaScript","body":"One of my favourite JavaScript features is its literal object notation.\nIt allows you to declare data structures in `JSON`, which is a very\nsuccinct, C-like syntax. You can use this notation to declare SETs, and\nthe `a in b` syntax to verify a variable is in a set:\n\n```\n/* Declare your set as a JSON constant */\nvar valid_widgets = { \n    'widget-viewer': 1,\n    'special-viewer': 1,\n    'widget-editor': 1 \n};\n\n/* Fail if something isn't in the set */\nif ( ! (options.widget in valid_widgets) )\n    return false;\n\n/* Profit! */\n```\n\nAs the `in` keyword operates on the index of the referred object, we set\nthe value of the constants to `1` (true). A bit of a hack, but it\nresults in a very clean way of checking if something is part of a set of\nvalid values.\n\n#Weblog\n","tags":["Weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0}],"paid":false,"full_post_url":"","views":269,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"68fh5kdlgvw93nji","slug":"giga-boxels-the-future-is-big","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2012-04-08T22:22:47Z","updated":"2022-02-17T23:24:27Z","title":"Giga-boxels, the future is big","body":"Somehow I missed the recent larger EC2 unit sizes:\n\n![Console](https://images.warpedvisions.org/2012/03/cc2_console_menu_1.png)\n\nWhen I saw this, I immediately thought: these numbers will have K, M, and G suffixes within the next 5 years. Compute units will be sold as 88 mega-ECUs. Imagine 88 giga-ECUs?\n\nThe ECU is similar to our old measure of computing: boxen (except more virtual). The idea of giga-boxen boggles, but is inevitable (boxen is so much more inspiring than ECUs), or maybe it should be **boxels**?\n\nMy best guess is that K-boxels will be available within 2 years, M-boxels within 4, and G-boxels within 7. By the time my kids hit university, we'll be working with giga-scale utility computing units.\n\nIn the words of the great philosopher Ted Logan, \"Whoah!\"\n\nGiga-boxels!\n\n#Weblog\n","tags":["Weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0}],"images":["https://images.warpedvisions.org/2012/03/cc2_console_menu_1.png"],"paid":false,"full_post_url":"","views":286,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"mcc0sx2x9zmwrw7v","slug":"do-just-one-more-thing","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2012-03-28T22:51:08Z","updated":"2022-02-15T23:51:54Z","title":"Do just one more thing","body":"You start the day finding consciousness. Slowly or quickly, it doesn’t matter … you become aware of the world incrementally. Maybe you hit the snooze button once? Twice? Or maybe you wish you did. If you’re like me, you’ll find some caffeine and make the trek to work.\n\nAnd if you’re lucky you will find yourself in your office quickly, alert, and ready to go. You work your way down your list of tasks until your customers, coworkers, or biology interrupt you. It may be minutes. It may be hours. The question is, what do you do when you’re interrupted?\n\nI have a suggestion. Do just one more thing. If it’s not rude, do another. And another.\n\nThis is how things get finished: by doing them when the doing is good. And moving just one more inch gets you closer, while you’re brain is focused, and before you get pulled into something else.\n\nOf course there are other tricks to getting things done. Doing the right things, for example. Working with a healthy mind; finding ways to focus and hone your skills. But doing just one more thing is an easy hack that works wonders.\n\n#motiviation","tags":["motiviation"],"categories":[{"hashtag":"motiviation","slug":"motiviation","title":"motiviation","post_count":0}],"paid":false,"full_post_url":"","views":154,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"b3weugq59brm92f1","slug":"the-facade-of-uptime","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2012-02-10T00:04:49Z","updated":"2022-02-18T00:05:07Z","title":"The facade of uptime","body":"While writing a spec earlier today the last few years of progress in server land hit me: uptime is a facade.\n\nIn the early days, server resources were expensive and scarce. Uptime was sacred. Long running hardware was celebrated, UNIX tools were born, beer was consumed.\n\nThe problem of focusing on the hardware is that it detracts from the time you spend developing software. Remember those late nights configuring RAID setups? What about hunting down faster drives, or terminating SCSI cables?\n\nWith utility computing like Amazon Web Services, hardware no longer exists. Slices of computing are sold by the hour, by the byte, and by the feature. Provisioning is nearly instant, and can be controlled by API, from any machine connected to the net.\n\nMachine uptime doesn't matter. It's been replaced by ubiquity.\n\nIt ends up that *service* uptime doesn't matter either. Instead of thinking about keeping continuous instances running, we need to focus on ways to make it easier to replace instances, and mechanisms for pooling service resources in ways that fail over gracefully.\n\nAs the cost of swapping servers approaches zero, it becomes the ultimate form of stability and parallelization.\n\nWhile I was thinking about uptime tonight, an impending software update threatened the honour of my computer. My first reaction was to avoid running the updates: this machine was nearing 3 months between reboots.\n\n#Weblog\n","tags":["Weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0}],"paid":false,"full_post_url":"","views":286,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"szqi7zzemjqaxeq0","slug":"tables-versus-css-redux","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2012-01-09T23:51:27Z","updated":"2022-02-17T23:51:55Z","title":"Tables versus CSS, redux","body":"I'm a bit surprised that the [argument](http://www.reddit.com/r/programming/comments/7uecr/css_should_not_be_used_for_layout_good_rant/c07fqvk) over [tables versus semantic layout](http://www.jwz.org/doc/markup.html) is still floating around. It ignores the obvious:\n\n- Any set of nodes can be rendered like a table\n- Any table node can be rendered like a non-table node\n\nThere is no difference between a `\u003cdiv\u003e` and a `\u003ctd\u003e`, except for the default layout settings and nesting. The [major browsers support](http://www.quirksmode.org/css/display.html) the distinction with the `display: table-cell;` and its important variants, so it's a matter of how you want to organize your data.\n\nThe argument is really *semantics* versus easy *pixel perfection*. Sub arguments include, *\"Do I really want my site to adapt to various handheld sizes?*\" and, *\"Screw accessibility, I like my pixel perfect layouts, thank you very much.\"*\n\nThe whole discourse ignores where the W3C is aiming HTML5, which is to use things like `section`, `article`, `header`, `footer`, and `nav`. These tags are much nicer than `\u003cdiv\u003e` or `\u003ctd\u003e` soup, at least to me.\n\nBut screw semantics, you want your perfect little `px` layouts.\n\nThe complaint about pages that use positioned or floated blocks is the \"difficulty\" in rendering the classic column layouts. You know, the column layouts that don't behave like newspapers (text doesn't flow between columns). And guess what? These classic column layouts are based on---wait for it---the table layouts of the 1990s. HTML1, without any stinkin' CSS. We did what we could then, with the tools we had.\n\nOf course real column layouts are possible now with CSS3, where text and headlines can flow between proper columns, where you can control flow (roughly at least), and where you can make the columns look like real print columns. And reasonable faux-tabloid-sidebar-content-sidebar layouts are easy to build without table blocks, if you absolutely must have them, and you're still free to use table block rendering if you're so inclined.\n\nBut people want their pixel perfect, hey-look-I-can-use-Photoshop layouts, without having to work for it. These people miss the point of putting stuff in a browser, which is, *\"Hey, look, people can view this stuff in browsers of all sorts on hundreds of different hardware and software platforms!\"* You get a huge potential audience at the cost of easy pixel perfect layouts.\n\nYou can still churn out perfect layouts with all sorts of hacks and caveats, but the argument for putting things in tables is mostly unrelated. There are other ways to get the same effect, while making your content make sense to your future self and automated tools of all sorts. And there are better ways to get a good effect while supporting a wider range of browsers and tools. [Fluid layouts](http://37signals.com/svn/posts/2661-experimenting-with-responsive-design-in-iterations) are way more interesting anyway, as they work in more browsers, more usefully, and with less work.\n\nTables have their place, of course, for things that are actually [tables of data](http://www.ptable.com/). Even then, you could use paragraphs and headings if it made more sense for the content.\n\nSo it's really pixel-perfect and familiar versus ubiquitous, useful, and semantically meaningful.\n\nIt ends up it's all about the data. Make the data obvious, and everything else falls into place. HTML5 has enough semantic and layout expressiveness to wrap data in a way that is obvious and easy to make look good.\n\n`\u003c/rant\u003e`\n\n#CSS #Programming\n","tags":["CSS","Programming"],"categories":[{"hashtag":"Programming","slug":"programming","title":"programming","post_count":0},{"hashtag":"CSS","slug":"css","title":"css","post_count":0}],"paid":false,"full_post_url":"","views":306,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"zyrba3zy88mpqytd","slug":"real-work-is-boring-but-i-love-it","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2011-12-25T00:17:39Z","updated":"2022-02-16T00:18:01Z","title":"Real work is boring (but I love it)","body":"I had an epiphany early this year: getting good at something isn't about finding a groove or being especially clever, it's about honing a method of doing something. Or lots of methods, meticulously crafted, carefully practiced, and well executed over and over again. That's it.\n\nThe problem is in discovering the method. It's harder than you expect.\n\nIt turns out that most things, while easier than you'd think, are much different than you'd expect. The process for making an excellent curry, for example, is nothing like what I had imagined, nor is the path to better photography, or art, or anything. Finding methods for things is in itself curious, and my methods for getting to good versions of things is always unexpected.\n\nSoftware and web design are no different: they're not difficult, but the path to become competent with them is nothing like what I dreamed when I was younger. I found that it's mostly about discovering and repeating methods of doing the parts of design, and spending much more time polishing than seems intuitive. And while getting feedback can teach you something, curating your own design sense pays better returns. It's all in good taste, practice, and polish. Seems simple, no?\n\n## A pattern emerges\n\nEarlier this year I was thinking back on the various redesigns of this site. My approach to design has changed, as you would expect, but more interesting: it takes a lot longer now than it did 15 years ago. What I found was that design gets better the longer you polish it, and it becomes exponentially better the more times you're able to distance yourself from it, which allows you to actually see your design as others might (and this is the real magic, the seeing).\n\nThe trick with design is in finding perspective, and taking the time to polish it. And many of the methods I use now exist explicitly to look at a design from different viewpoints. I had to discover these methods, practice them, and only after that could I start to produce even mildly competent designs.\n\nWith cooking I found that it was so much simpler than it looked. Basic flavours and layering techniques are incredibly similar around the world, the only differences are in the available ingredients and how you mutate the dish with heat. The hard parts of cooking are in mastering the most basic of skills, and in the preparation and timing. The actual cooking and inventing new dishes is as simple as adapting what everyone else is doing around the world.\n\nPhotography? It's only two things: interesting composition and lots and lots of photographs. Everything else is bullshit. It took me years to realize that I would throw out most of my photographs, and that sometimes I would take a shitty shot and turn it into something interesting, and that if I didn't that life would go on. And life does go on, and sometimes I impress people with that one picture that sits on a pile of garbage shots. And sometimes people like the shot that I think looks like shit.\n\nAnd art? Art is one simple concept: make peace with failing over and over again, searching for that one thread of interesting. Once you find it, you obsess over the methods that got you there, repeating and varying it as much as you can. But the key is that you have to fail over and over again. Who expects that? And if you hear it, who believes it?\n\nUnfortunately you have to discover the meta principle yourself. And fortunately these unexpected things are all related, as art, design, and life are all one thing.\n\nThe critical factor is that doing something well has an unexpected path. You might know what works well, as in you like that curry or that photograph--but doing it yourself means discovering some counterintuitive principles, and repeating them, practicing their constituent parts, and then cherishing the path that got you there. Over and over and over again.","tags":[],"paid":false,"full_post_url":"","views":252,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"f9db5wny24nrh038","slug":"the-problem-of-organization-th0z","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2011-10-31T23:07:59Z","updated":"2022-02-18T00:09:29Z","title":"The problem of organization","body":"It's not that these tools and techniques are bad in themselves, but our use of each should be fit into a well tuned approach to building software. An entire project delivery should be tidy, professional, and complete.\n\nThere are a few causes to the problem of organizational buildup. Our software is limited, our methods need improvement, and the unseen pieces of our project pile up and are left a mess once we ship. categories: rants\n\nTODO lists, project management software, and GTD all have the same basic problem. They push you to produce things that aren't your end goal, to help you improve your focus, thinking, and (in the end) produce better quality software in less time. These artifacts clutter your archives; the very things that help you create more effectively get in the way. They're a form of noise to your project's signal.\n\nIt's not that these tools and techniques are bad, but our use of each should be fit into a well tuned approach to building software. An entire project delivery should be useful, professional, and complete.\n\nThere are a few causes to the problem of organizational buildup. Our software is limited, our methods need improvement, and the unseen pieces of our project pile up and are left a mess once we ship.\n\n## Everything is a file\n\nOur tools treat each of our artifacts as equal. They're generic, as there are many approaches to managing projects, so very few assumptions are made about the importance of each piece of the process. Requirements, specifications, prototypes, estimates, and development plans are strongly interrelated, but few tools are able to capture this.\n\nEven the application structure of project management and software development tools re-enforce the everything-is-equal by placing features in tabs, sections, and tree nodes similarly. While it's easy to organize product features into tabs and tree nodes, it keeps them at the same level of importance by default and we have to work to tame the mess.\n\nA polished specification is much more important than the research and prototypes that fed into it. A completed user interface design is superior to the sketches and feedback that improved it. Our tools, however, rarely help us focus on these differences.\n\n## Rushed and unfinished\n\nOur own methodology--our process of analysis, design, and development--contributes to the chaos of project bits. We don't like to fund (or spend time) on things that aren't part of the output, so prototypes, design documents, and specifications remain unfinished and unpolished.\n\n![](https://images.warpedvisions.org/2011/10/process-mess.png \"process-mess\")\n\nWe also produce, and subsequently discard, various artifacts as we're learning the process of building better software. These forays into improvement leave a wake of debris that is unlikely to be used again. This is a failing of team management and individual process: we just don't put enough emphasis on picking successful tools or polishing and curating the prerequisites.\n\nProjects need teams that have a winning approach. We should not be exploring process on project time (side quests are better for this), and hence the exploration and failure of various processes should be insulated from active work. Why practice at game time?\n\n## Cooks who cannot clean\n\nOur tools should serve us better. Our own methodology should avoid processes that fail us. In the end, though, we shouldn't leave the mess behind. Each member should take pride in what we deliver, including the parts unseen: the designs, specifications, drawings, models, and all the supporting pieces.\n\nOur methods and techniques are not unfortunate side effects in building software. They are what's involved in building software. We sketch, we design, we carefully consider each piece. These supporting activities are not lesser to writing code, they make writing code better.\n\n## Less is more\n\nThere are many great reasons to use better tools, to understand the process of building software, and to curate the entire effort. We know that it improves communication, reduces bug rates, and reduced project costs. We know that it makes for better software. And yet we end projects late, incomplete, insufficient, and in a mess.\n\nLet go of the tools that do not work. Ignore the processes that are obvious losers. Obsess over ways of documenting design that take less time, and produce something useful. Learn to write better, make your sketches count, and don't leave a mess at any time. The thinking that goes into your software is the software.\n\nKnow how to build software. Sketch, document, and plan. Be proud of the method of building software, and curate the in-between steps. Spend time between projects improving your process; finding ways to do less and better. And above all, curate your thinking and the things you record your thinking with. What you produce will be better for it.\n\n#SoftwareEngineering #TheArtOf\n","tags":["SoftwareEngineering","TheArtOf"],"categories":[{"hashtag":"SoftwareEngineering","slug":"software-engineering","title":"software engineering","post_count":0},{"hashtag":"TheArtOf","slug":"the-art-of","title":"the art of","post_count":0}],"images":["https://images.warpedvisions.org/2011/10/process-mess.png"],"paid":false,"full_post_url":"","views":215,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"9lx6ybywz034lpqu","slug":"how-to-beat-writers-block","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2011-10-24T22:29:58Z","updated":"2022-02-17T23:30:13Z","title":"How to beat writers block","body":"So you can't write. You're empty, tired, and unfocused. You've tried exercise, meditation, caffeine, binge sleeping, and a dozen other cures--but nothing comes out. And when you do happen to squeeze out a few paragraphs, you stall, spiralling further into your uninspired daze. You are burnt out.\n\nWriter's block and burnout are the same problem: undue mental exhaustion brought on by overuse, misuse, and other stress. It's important to understand that you cause your own burnout, either directly through your actions, or indirectly through your lack of action. It's *your* choice.\n\nWhile it isn't just writing that's affected by burnout, writing is one of the fundamental skills subdued by mental exhaustion. If you can't write, you can't design, create, express, or inspire. For me, writing is the real measure of my creative mojo.\n\n## It's a sticky problem\n\nDon't worry about the root cause of your exhaustion. Your job and your life have very little to do with how you react to stress. Your reaction to stress might feed your exhaustion, but learning to dodge them are only a temporary measure. The real problem is that you're stagnant, stuck in a place where you allow these natural forces to erode your being. While the erosion might cause the burnout, allowing it at all is the real problem.\n\nYour goal is to get unstuck. Ignore the bullshit of addressing stress and the remedies that promise to manage it. The stress doesn't matter. Your balance isn't important. You need to get unstuck. You need to strengthen. You need to create.\n\n**Don't try to find balance.** Balance isn't something you can concentrate on; it's what happens when you become stronger, when you create things, when you polish them, and when you enjoy the result. If you focus on balance, you'll find it impossible to stay balanced at all. Let balance happen.\n\n**Don't try to focus.** It's not something you can do directly, rather it's what happens when you do. Build something. Learn to perform each step well. Train yourself to understand the history and science behind each concept. Enjoy polishing each piece until you're proud of it. Just do it. The burnout melts away.\n\n**Skills are fundamental.** Skills are required to do, even if secondary to the doing. Learn, practice, and play regularly in the domains that matter to you. This is a form of doing that precedes and complements the act of creating things.\n\nYou need to learn to develop your skills as part of your regular regimen. You should include it in your project work, when things you're building require better understanding. You should also include it in those times where it's not practical (or possible) to create. Between projects, when especially demotivated, and when the opportunity encourages it.\n\n## Doing is all that matters\n\nBurnout is the result of becoming stagnant and the natural erosion that results. You can't cure burnout by coping with the erosion, you transcend it when you make the erosion irrelevant. Grow, practice, and do.\n\nJust do it. Do it well. Do it now, and repeatedly, and with passion. Throw yourself at making things and understanding every part, until you breathe their essence. Enjoy the process of practice, in a way that complements your work. Everything else ceases to exist as you grow stronger and do more.\n\n#Weblog\n","tags":["Weblog"],"categories":[{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0}],"paid":false,"full_post_url":"","views":271,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"te58h1rqv3e3k33k","slug":"on-becoming-a-designer","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2011-06-06T22:36:00Z","updated":"2022-02-17T23:36:18Z","title":"On becoming a designer","body":"I've become passionate about design. It's a subtle craft that says something, things that can't normally be said with words. It suggests things. It implores us to think in a particular way. It encourages us to go here or there. It is enough of a metaphor to be easily recognized, but not so much that it becomes tacky, unless of course tacky is the thing you need. Design is the artful side of craftsmanship, the soul of a thing.\n\nI was talking about design the other day with a friend. \"How do I get into design,\" he asks? He already has the passion for design, he sees design, but he lacks the processes for finding, honing, and pushing designs along into to production.\n\nHow do you get into design? You need to see it first. Feel it. Then you do it. Again, and again, and again. Floundering, failing, and fumbling your way through at first. Is there any other way to learn to ride? To swim? It's a craft that requires balance and grace, and some amount of time to learn to execute well. And that's okay.\n\nHow do you get into design indeed! Find your passion, as it fuels the process. Passion is simple too: focus your frustration, awe, and excitement for a thing into a narrow band of optimism and spunk. It can always be better, and it can always be solved. It's just a matter of seeing it, boiling it down, and then actually doing it.\n\nPassion starts with comprehending that a thing isn't working well enough. Then you imagine what it could be, what else has been done---what hasn't been done yet---and let your mind iterate over the possibilities. You eat. You sleep. You shower. You read. And at some point you see it, as if it were magic.\n\nYou'll see many visions of what it should be (many of them good). Later you'll learn which visions are better, and which are worth chasing after. But find your passion first, then learn to listen to it, to ignore it when it's wrong, and to trust it when it's onto something.\n\n### An example\n\nI love reading. Great inspiration can be found by streaming in the things other people write. Books are especially excellent, as the format turns out thoughtful, polished experiences. Buying and finding books, on the other hand, is something I often find frustrating. It's an investment of time and money that can result in a growing pile of carefully bound recycling. Books you feel compelled to keep (but likely will never read to completion).\n\nNow there are bookstores and libraries that make finding books a better experience. You know the sort, comfortable chairs, brilliant selection, and a staff that know the product and who love to read. These shops are gems.\n\nEnter Amazon.com. It's a store with incredible potential. A huge collection of titles. Reasonable shipping, easy book downloads, and a sturdy site to run it all. But it doesn't work well and it's not very inspiring.\n\nMy favourite book store isn't much to look at, but it's organization is incredible. The shelves were built by the owners in a way that showcases the right books, providing an archive for depth, all while being easy to navigate. The owners themselves are avid readers, having read most everything I've asked them about. They haven't just read most of their inventory, they usually know exactly where it is or when they'll get it in next. And if you want a recommendation, they remember what you've read so that their recommendations are only a few steps from clairvoyant.\n\nAmazon isn't much to look at either. In fact it's downright noisy. Dozens of things mashed into every page, making it difficult to find what you want. While their selection of print books is excellent, many of the books are not available for download. The result is an experience that isn't fun or inspiring. In fact, I often avoid it until I'm absolutely out of reading material.\n\nAmazon could be so much more. It should be the comfy bookstore you want to browse. It should be the eclectic owners, their pristine organization, and the recommendations that leave you wondering if someone knows just a bit too much about you. It should be effortless, not leaving you wondering if something will be available for your mobile device in your region. It should feel like the perfect bookstore, melting away to trade your money for a lifelong experience of losing one's self between the pages of whatever turns your crank.\n\nBut it isn't. Buying books online is mostly worse than queuing up at your local mega mart, innundated with impulse items, inexperienced staff, and bright, over-saturated displays and lighting. Limp, uninspired, grating a bit on your nerves. You shop there when you have to, but the result is uninspired.\n\nThe first part of design describes that feeling, the way a thing should be front to back. The real world things it needs to bring to you, to make you feel. And the real bits of functionality that it absolutely must have.\n\nThe second part of design is in describing and making it happen, but that is something best talked about after digesting the first part. So go on, digest.\n\n#Design\n","tags":["Design"],"categories":[{"hashtag":"Design","slug":"design","title":"design","post_count":0}],"paid":false,"full_post_url":"","views":264,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"f73tjmna7waivljx","slug":"howto-get-better-at-stuff","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2011-05-16T22:25:04Z","updated":"2022-02-17T23:25:18Z","title":"HOWTO get better at stuff","body":"If you want to get better at something, do a lot of it. Throw yourself at practice and real chances to do it.\n\nWhen you want to become great at something, stick with it, obsess over it, and suck up all of the knowledge that surrounds it.\n\nAnd when you want to become truly incredible at something, you need to invert your thinking: reflect on the fundamentals, write, and do anything that lets you define what that thing is.\n\nThen lather, rinse, and repeat.\n\n#HOWTO\n","tags":["HOWTO"],"categories":[{"hashtag":"HOWTO","slug":"howto","title":"howto","post_count":0}],"paid":false,"full_post_url":"","views":247,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"oxc2m5cribinn8vn","slug":"the-evolution-of-thinking-in-software-design","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2011-05-10T23:00:13Z","updated":"2022-02-18T00:00:30Z","title":"The evolution of thinking in software design","body":"I know a few generations of developers. I find they tend toward different ways of thinking about software design, based on the languages and decomposition tools that were available at the time they formed their thinking. Their tendencies shift over time too, but often their imaginations are limited by whichever mode of thought they're working in at the time.\n\nBy design I mean the approach to solving a problem with software, including software architecture and low level design (not product, visual, or UX design). These are another universe around how we think about solving people's problems with software, a topic for another set of posts.\n\nI realized the other day that design thinking follows an evolutionary path. It progresses to solve larger problems in better ways, and is based on layering and combining the various tools and techniques available.\n\n### A maze of twisted pathways\n\n1. Flowcharts and pseudo code\n2. Data diagrams and relational algebra\n3. Eventing and state diagrams\n4. Object diagrams and trees\n5. Layered architectures and approaches\n6. Partitions and service maps\n\nThe thinking moves from direct low level constructs toward more abstract solutions, based on less obvious symmetries and fissures. A flowchart, for example, is a direct mapping of instructions. A set of services and domain partitions is far less direct, and often maps to important constrains like scaling, performance, and cost.\n\n### Well, duh\n\nIt's obvious that our thinking has changed as software becomes more complex. What's interesting is how we get stuck in particular ways of thinking, and how difficult it is to translate between the various design approaches. A procedural solution is a very different beast than one based on intersecting data, and is very different again from a set of disjoint services for the same concepts.\n\nTo talk about design intelligently, we need to lay the groundwork for how we plan to cast the approach. More than one design tool can be used, but it's important that everyone participating in the design understands how to think and discuss things cast using that particular approach.\n\n#Design\n","tags":["Design"],"categories":[{"hashtag":"Design","slug":"design","title":"design","post_count":0}],"paid":false,"full_post_url":"","views":373,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"84l0nlqtc2g920fh","slug":"on-being-awesome-just-do-it","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2011-01-25T00:22:59Z","updated":"2022-02-16T00:23:24Z","title":"On being awesome: just do it","body":"[Merlin Mann](http://www.43folders.com/2011/01/17/permission-to-be-awesome) asks us why we're waiting to be awesome, as he remembers Steve Job's [2005 Stanford address](https://www.youtube.com/watch?v=UF8uR6Z6KLc). It's a good question: why do we wait?\n\nThere are all sorts of reasons, of course, but in the end my simple philosophy is: \u003cem\u003ejust fucking do it\u003c/em\u003e. Sometimes I have to say it to myself out loud, in the voice of [the Dude](http://www.reddit.com/r/AskReddit/comments/f5hvt/what_do_so_many_people_find_enjoyable_in_the_big/?limit=500), when things like absurd politics or chunky technical problems get in my way. \"Just do it, man.\" I need to be reminded to carry on.\n\n\u003e ...the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do. If you haven’t found it yet, keep looking. [— Steve Jobs, 2005](http://www.quotiki.com/quotes/8584)\n\nIt isn't just doing what you love, you also have to choose to love what you do. Love the hard parts, get off on doing them. There will always be bullshit around what you love, if you choose to see it. Instead, let the noise melt away and get good at your craft. And then do it. Lots of it!\n\n\u003e You don't need to wait to be awesome. [— Merlin Mann](http://www.43folders.com/2011/01/17/permission-to-be-awesome)\n\nDon't wait. Don't see the bullshit. Don't even worry about the hard shit, it's the hard bits that really hone your craft. Work through it, do it well, and be proud of what you do. And over everything else, don't wait for a reason to do it. Be awesome.","tags":[],"paid":false,"full_post_url":"","views":246,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"d6ll86atrhwx8g5b","slug":"exposing-design","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2010-11-22T23:19:14Z","updated":"2022-02-17T23:19:32Z","title":"Exposing design","body":"When you describe a design to a group of people, each person imagines something different. Depending on your story and the individuals, understanding may vary wildly. And if it differs enough, the result is chaotic--unpredictable and often negative.\n\nYou need to fit how you show your ideas to different groups of people carefully, and notice when you your story isn't hitting. For your closest team members you can wave your hands and scrawl ideas on a chalkboard. For people you work less frequently, you need more detail: proper drawings and clean wireframes. For non-technical clients you need even more, polished, functional prototypes and pretty drawings.\n\nWhen you fail to excite people with your ideas you do more harm than good. They imagine something more or less than what you're thinking, leaving them disappointed and confused. You give them a different taste than you intended, which you will have to work to overcome in the future. Instead, you need to spark their imagination skillfully, stirring lively, constructive discussion.\n\n### A working example\n\nOne of the products I'm working on is a refresh for an ancient financial system. We're working to make it scalable, easy to operate as a web service, and viable as a business for the client. Each of these problems is interesting and fun.\n\nEarly in our prototype work I made the mistake of leaking a technical proof to one of our non-technical team members (not the client, luckily). The prototype proved that we could reproduce the legacy calculations accurately, using cheap, common tools and schema design. Technically we were excited about the win, so we showed it around internally.\n\nThe problem with technical prototypes is that they lack pizzaz, often intentionally. This piece of the prototype matched the old system design to make it easy to test, but looked dated and out of place in a modern web app. The effect of showing this stage of the work to the wrong people bogged down our shared picture of the product. It killed our momentum and excitement, which took time and energy to recover. The loss was more psychological than literal, but was a cost nonetheless.\n\nThe next planned task, of course, was to find the visual styles for these screens, as now we knew that they were technically possible. And the design turned out better than expected, but the win was dulled by the lost momentum and our gains were smaller than they should have been.\n\n### More than words\n\nThe problem isn't just in the explanation or the path, it's in the combination of people, experience, and approach to the narrative. Each thing you show (and how you do it) matters. Each person's understanding and contribution matters, as they are part of the momentum. Focus what you deliver, think clearly about the presentation, and keep your audience in mind.\n\nThere's a bigger win in showing off the right work to the right people: it forces you to deliver better quality earlier. The risk and of miscommunication is real, and the wins--when you get them--are golden. Force yourself to show off better work, make it a personal goal. Challenge your team to show better work too. It pays off in a multiplicative way, and that's good for the things you build.\n\n#Design\n","tags":["Design"],"categories":[{"hashtag":"Design","slug":"design","title":"design","post_count":0}],"paid":false,"full_post_url":"","views":255,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"65nocmtqsa2v6dh5","slug":"howto-directory-recursion-in-boost-and-other-tips","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2008-04-23T22:26:01Z","updated":"2022-02-17T23:57:56Z","title":"HOWTO: Directory recursion in Boost (and other tips)","body":"Boost's [Filesystem](http://www.boost.org/doc/libs/1_35_0/libs/filesystem/doc/index.htm) library is an incredible resource: it abstracts paths, directories, and `stat` results.  It simplifies coding shell problems in C++, it's portable, and is maintained by a large community of contributors. The one downside of Boost is that some of its newer libraries are poorly documented. ((Something I want to contribute to.))  Until I have time to get involved in the Boost project, I'm going to post examples here.\n\n*Traversing a directory tree*\n\nThis is the coolest feature I've found in `boost::filesystem` so far.  It treats directory elements like iterators, and has a convenience iterator that flattens the problem of iterating through a directory tree recursively.  The only examples I found for it were in their extensive test sources, (See [convenience tests](http://www.boost.org/doc/libs/1_35_0/libs/filesystem/test/convenience_test.cpp) and [operations tests](http://www.boost.org/doc/libs/1_35_0/libs/filesystem/test/operations_test.cpp) for more examples.) which are a bit light on comments.\n\n```\n#include \"boost/filesystem.hpp\"\n#include \u0026lt;iostream\u0026gt;\n\nfor ( boost::filesystem::recursive_directory_iterator end, dir(\"./\"); \n       dir != end; ++dir ) {\n       cout \u0026lt;\u0026lt; *dir \u0026lt;\u0026lt; std::endl;                                    \n}\n```\n\nThe example starts in the current working directory, and prints all of the file names (and directories) in `inode` order. ((Later I'll try to post an example that uses the `stat` features to dump extra information.))\n\n_Notes:_\n\n- I don't alias the namespace here (but I recommend doing so in production code, see below)\n- Creating an instance of `recursive_directory_iterator` sets it to the `.end()` element by default.\n- The `path` type supports all standard string paths, including relative paths.\n\n\n*Aliasing Boost namespaces*\n\nHere's how Boost's own source recommends aliasing their namespaces:\n\n```\nnamespace fs = boost::filesystem;\nnamespace sys = boost::system;\n```\n\n\n*Other cool bits*\n\nI'll write more about these later, but for now here are a few things you'll find in the library:\n\n\n- `fs::exists( boost_root / \"libs\" )`, a static function to check if a file exists (`-e`)\n- `fs::current_path()` that returns the application's `cwd`\n- `fs::create_directories( \"xx/yy/zz\" )` is equivalent to `mkdir -p xx/yy/zz`\n- `fs::is_directory( \"xx\" )` is the same as Perl/*sh's `-d`\n- `fs::change_extension(\"a.txt\", \".tex\")` does the obvious\n- `fs::extension(\"a/b.txt\") == \"txt\"` is used to check file extensions\n- `fs::remove_all( \"x/\" );` deletes everything in `\"x/\"`\n- `ifstream file2( arg_path / \"foo\" / \"bar\" );` shows the overloaded `/` operator!\n\n\nThings that are great about `boost::filesystem`'s approach:\n\n\n- Static functions are used for 'helper' stuff.  Take note C++ devs: this is a great balance for types, it keeps the types noise-free while still providing a great deal of utility.\n- It mirrors Perl/*sh functionality, something most developers should know well.\n- It throws errors (`filesystem_error`), allowing for some really clean, transactional code.\n- And, it abstracts paths that work on Win32, OSX, Unix, and Linux variants.\n\n\n#boost #c++","tags":["boost","c","include"],"categories":[{"hashtag":"boost","slug":"boost","title":"boost","post_count":0},{"hashtag":"c","slug":"c","title":"c","post_count":0},{"hashtag":"include","slug":"include","title":"include","post_count":0}],"paid":false,"full_post_url":"","views":1065,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"7vo2my2f10x8k8c7","slug":"about-bruce-alderson","appearance":"norm","language":"en","rtl":false,"type":"post","created":"1970-12-31T23:47:32Z","updated":"2022-02-19T01:03:16Z","title":"About me","body":"Hi, I'm Bruce Alderson.\n\nI design and craft software for fun and profit. I also write and make artful things using various methods and tools.\n\nI enjoy life in all of its oddness and beauty, especially the distinct, the curious, and the wondrous. I believe that simplicity is possible in anything, where simple is defined as when things fit _just so_. I subscribe to the belief that who we are is had inch by inch, failure by failure.\n\nHere are some of the things I've:\n\n- [written](https://warpedvisions.org/),\n- [blurted out](https://twitter.com/robotpony),\n- [read](https://www.instapaper.com/p/robotpony),\n- [built](https://github.com/robotpony),\n- [worked on](https://www.linkedin.com/in/bruce-alderson),\n- [carved](https://www.instagram.com/warpedvisionsdotorg/),\n- [drawn](http://robotpony.ca/2012/08/microwave-dinners.html),\n- [cooked](https://food.warpedvisions.org), and\n- [captured](https://www.instagram.com/bruce.alderson/).","tags":[],"paid":false,"full_post_url":"","views":1825,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"cvj4icalmh3dyir7","slug":"about","appearance":"norm","language":"en","rtl":false,"type":"post","created":"1970-12-01T23:47:32Z","updated":"2022-05-24T23:31:52Z","title":"About the site","body":"The site has been many different things over the years, from a [tumble](http://en.wikipedia.org/wiki/Tumblelog) of links, rants, essays, and quotes, to a straight up log of essays. These days it sits mostly within craft, makery, and software. \n\nThere are no comments, nor any contact form. The best filter is public discourse … you taking the time to write a response somewhere, linking back to me. It takes more effort than a comment and bypasses most of the nonsense that comments invite. And, it gets *you* writing.\n\n## History; I'm getting old and that's okay\n\nThis site started a long, long time ago. It started before we called these things weblogs and before there were tumbles, streams, feeds, and any of the social media scene. It started out as static `HTML`, using `TABLEs`, and an unfortunately small font face on dark, detailed backgrounds. It was hosted on a University system that was connected to the interwebs using a shared ISDN connection. It moved to a few hosted services before it settled down on a lovely standard Debian box.\n\nFor the past few decades the site has been hosted by [Dreamhost](http://dreamhost.com/r.cgi?madmaxx/shared/comparison.html). They have been good and very occasionally slightly less good. I've stuck with them as they were my first taste of organized hosting, they're honest, and mostly it just works. Kudos to them for sticking with the long game; it's downright respectable, and it's super reliable 20-something years later.\n\nThe site is now hosted by [WriteFreely](https://github.com/writefreely/writefreely),  hosted by [Write.as](https://write.as), though it's been hosted using dozens and dozens of other tools (like Jekyll, Movable Type, Textism, Slashcode and siblings, Blosxom, Tumblr, and a few of my own). It's always been my testing grounds for new tools and techniques. And for what it's worth, my favourite engine (next to this one) was [Blosxom](http://www.blosxom.com/), a bare-to-the-metal Perl thing that just felt right.\n\n## Other sites\n\nI have had many sites and projects. More than I should have even. I've shut most of these down over the years to focus on hacking Lua, JavaScript, and writing more. Some day I hope to reboot RobotPony, but I may just move it here and post silly Venn comics from time to time.\n\n","tags":[],"paid":false,"full_post_url":"","views":1918,"likes":0,"collection":{"alias":"warpedvisions-org","title":"warpedvisions.org","description":"ESSAYS, HOW-TO ARTICLES, AND GENERAL MAKERY BY [BRUCE ALDERSON](about-bruce-alderson).","style_sheet":"","public":true,"views":24345,"domain":"warpedvisions.org","url":"https://warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}}]},{"alias":"food-warpedvisions-org","title":"food.warpedvisions.org","description":"Recipes and thoughts about food.","style_sheet":"","public":false,"views":1310,"domain":"food.warpedvisions.org","url":"https://food.warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":9,"posts":[{"id":"mlaoi6bqv67hc4kk","slug":"a-simple-vegetarian-red-thai-curry","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2022-05-08T00:09:41Z","updated":"2022-05-08T00:11:37Z","title":"A simple vegetarian red Thai curry","body":"I reworked my flexible Thai curry recipe into something that I can make in less than an hour ([recipe here](https://docs.google.com/document/d/1C0_6UJBLO_mYSLRP7plckMXGAxO219Nx-1XNialzhLE/edit#)). I also made it friendly to vegetarians, as it works so well with tofu and mushrooms.\n\nThe biggest change is to bring the method closer to authentic, removing some of the French techniques I used in previous versions. I also recommend using a good commercial curry paste to save on time, or to make a larger batch of fresh paste and freeze it in ice cube trays. We have a large number of stores catering to Asian cuisines in our area, so I usually prefer to use fresh or preserved curry pastes.","tags":[],"paid":false,"full_post_url":"","views":118,"likes":0,"collection":{"alias":"food-warpedvisions-org","title":"food.warpedvisions.org","description":"Recipes and thoughts about food.","style_sheet":"","public":false,"views":1310,"domain":"food.warpedvisions.org","url":"https://food.warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"8l7bdyv84lulf28f","slug":"condensing-recipes-for-freezer-prep-or-how-i-make-things-like-beef-stew","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2022-05-07T22:59:38Z","updated":"2022-05-07T23:50:49Z","title":"Condensing recipes for freezer prep, or how I make things like beef stew","body":"I like to tell people that I'm proactively lazy. I like to cook when I have the energy and not cook when I'm lazy, and have great food either way. I also have limited freezer space, which has led me to prepare condensed versions of foods that can be defrosted and turned into full meals in under 20 minutes. [Condensing foods](https://en.wikipedia.org/wiki/Soup#Commercial_products) is an old technique that works well for home cooks today.\n\n## What makes a good condensed base?\n\nI think of condensing meals in terms of capturing the most difficult or time consuming steps into something that freezes well, while also taking up a minimum of space. The parts that are more easily cooked or don't freeze well are added when preparing the meal for service, so that you preserve texture, flavour, and nutrition of the more delicate components.\n\nA good example of this is beef stew. While it's possible to freeze carrots, peas, and other root vegetables in a stew, they are easy to add at service and keep their texture better when added later. And while it's possible to freeze condensed gravy, it usually changes texture and loosens up a bit after defrosting. So my approach to freezing stew is to capture the base of braising liquid, softened chuck roast, fond, and softened allium (onions, leeks, garlic), as well as the more key spices (rosemary, thyme, bay, and pepper).\n\nMy condensed stew takes about ½ of the storage space of the stew itself, and about ¼ the space of the stew and accompanying sides like potatoes and dumplings. A 500ml container can generally be stretched to about 4 meals, if you include sides.\n\nA good stew base can be adapted to a number of meals as well, but there are even more flexible base recipes that give a home cook more options when making weeknight meals.\n\n## Generalizing the condensed stew for other cuisines\n\nThe concept of reducing sauces is fundamental to some of the French mother sauces. Soup stocks can be reduced by half or more and frozen for future meals. If you reduce a stock enough, you end up with a demi-glace (shiny sauce), which can fortify soups, gravies, stews, and can be used in pan sauces for plating.\n\nMost Indian restaurants (in our area at least) prep a number of bases and base gravies that they turn into specific curry dishes at service. These base gravies freeze well, and can be used to make dozens of different dishes with the addition of proteins and vegetables after defrosting.\n\nThe same technique can be used for most cuisines. I make various condensed protein bases that can be used in a large number of dishes:\n\n- minced beef/mushroom mix (for meat sauces, cottage pie, soups, etc.)\n- \"taco\" seasoning (simpler minced beef with chilis, great for burritos, tacos, salads, chilli, hot dogs, etc.)\n- veg taco bases (lentils and seasoning)\n- soup bases (like French onion, phở, tonkotsu, chowders, etc.)\n- curry gravies (for various southeast Asian dishes)\n\n## Reducing waste and saving time\n\nCondensed cooking can also be used to mop up the fridge, using up ingredients that otherwise may go to waste. \n\nItalian style sauces are a great way to use up left over herbs, proteins, and cheeses which freeze better when combined into thick sauces. And meatballs, fritters, and pasta can be a great way to use up extra eggs, meats, cheeses, grains, bread, and vegetables. I'll make a batch of ravioli every few months to mop up extra mince and eggs, adding older hard cheeses, spinach, and other foods that need to be used.\n\nI've found that freezing meatballs can result in disappointingly dry meatballs, but if you freeze them in sauce they tend not to suffer from freezer burn. I usually freeze meatballs in a classic red sauce (using pantry onions, garlic, and tinned tomatoes), or in their own juices and stock.\n\n## Speeding up prep work\n\nPreparing bases and condensed foods can be time consuming. As a proactively lazy human, I've found a number of ways to speed up the process.\n\n### Use a pressure cooker\n\nFor minced meats and soup stocks a pressure cooker is more than twice as fast as the same recipe using standard methods. I use a 7.5L (8qt) stove top pressure cooker to turn 2kg (~4lbs) of minced meat, mushrooms, and accompanying vegetables into a tender base in 25 minutes (plus heat up time of 10 minutes, and cool down of 15 minutes), rather than 3-4 hours. I'll do two batches on a lazy Sunday afternoon, and get about two months of meals worth of proteins.\n\nAny protein that you can braise is also significantly faster to prepare in a pressure cooker. Cuts that braise well also tend to be cheaper, so roasts like chuck roast, pork shoulder/butt, chicken thighs, ribs, and such are easy to prep in under 45 minutes. Typically, a full pork shoulder will feed 4 people 10-15 meals. And don't forget that beans and lentils are braisable, and work well in a pressure cooker.\n\nPressure cookers are also great for soups and stocks. Both French onion and mushroom soup bases can be made in under 30 minutes, and most clear stocks can be made in under 45. It's even possible to make longer simmering broths like tonkotsu in around an hour (though you do need to fast-release to emulsify the fats).\n\nClear stocks work especially well in a pressure cooker, as long as you slow-release the pressure to avoid a full boil. The method is easy too, add stock ingredients (optionally roasted ahead of time), and cover with water. Add a bouquet garni (bag of herbs). I suggest avoiding plants in the brassicaceae family (cabbage, cauliflower, broccoli, etc.) and tender herbs, as they tend to add bitter notes with long (or high pressure) cooks. Also remember that flavours like garlic and celery are intensified by the process.\n\nI recommend reducing stocks after pressure cooking, pouring the liquid through a colander and fine mesh strainer. I use a spider or slotted spoon to remove most of the larger chunks from a stock, and then pour it over another pot with a colander and fine mesh strainer in it. I do this over the cook top, to prevent myself from accidentally forgetting the pot. There is nothing more disappointing than pouring a stock down the sink, a mistake most cooks have made at least once.\n\nIt can take a few hours to reduce a stock by half, so I suggest using the widest pot you have that fits the stock safely. I use a kitchen timer and check the reduction every 30 minutes or so, skimming off any froth that forms. I prefer a gentler simmer, and I run the range hood to minimize condensation in the house.\n\n### Batch preparation\n\nIt may seem counterintuitive that preparing larger batches takes less effort, but most of the overheads are shared. It doesn't matter if you chop 1 onion or 10, you will dirty the same number of dishes. Cooking down those onions only takes incrementally longer and uses a similar amount of energy. Any waste from the process needs to be discarded either way, and both need to be packaged up for freezing.\n\nWorking in larger batches also lets you apply better tools and techniques to the process, like using a mandolin to slice onions for French onion soup, a grater for making soffritto base, a blender for smoothing out sauces, or roasting on multiple large sheet.\n\nYou will also find that preparing larger batches makes for good practice that would otherwise take a lot longer. Dicing a 5kg (10lb) bag of onions will significantly improve your knife skills, as well as cleaning out your tear ducts. I find a strange satisfaction in dicing up a bag of onions, a few heads of garlic, and a head of celery. I find it even more satisfying to eat the soups and stews in the following weeks.\n\n## Food safety and freezing\n\nIt can be difficult to properly cool large batches of bases, sauces, and gravies. Most home refrigerators can't handle a large volume of hot food, so I usually use the sink method to quickly cool up to 8L (8.5qt) of base:\n\n1. Move the pot to an empty sink, placing it over the drain.\n2. Pour cold water around the pot, which should drain slowly. Keep the water on low enough to maintain a constant amount of water. The slow flow of water will help the contents cool.\n3. You can speed up the process by adding ice to the sink, and stirring the contents. It's possible to cool a large pot of stock from 80C to 20C in about 20 minutes. Most refrigerators can complete the process from there.\n\nThe goal is to cool foods to 4C (40F) as quickly as possible (under 40 minutes is ideal). Bacteria thrive between 20C (70F)  and 50C (125F), and their growth is exponential over time. And while reheating food will kill most bacteria in prepared foods, it will not always destroy the toxins created by those pathogens. \n\nOnce a batch of base is cooled enough to handle, I like to use deli containers of various sizes. As these containers come in 250ml, 500ml, and 750ml, it's easy to make predictable portions for future meals. Even better, these containers can be reused (assuming you don't get them too hot, and sanitize them between uses). They're also clear, they stack nicely, and take a label well. The main section of my home freezer is nearly always full of these containers, with future lazy meals waiting to be made.\n\nI strongly recommend labeling the food you freeze. I usually include the name of the food or base, and the month and year it was frozen in. This is helpful for using the oldest foods first, and especially handy if you make meals for differing food preferences and needs. I often have a mix of vegetarian and flexitarian foods in our freezer, and it's important not to mix the two up. Most liquid bases freeze well for 3 months (and up to 6).\n\n## Preparing lazy meals\n\nI go through all of this effort to make great (and healthy) food easy to prepare when I'm pressed for time (or feeling especially lazy). Having a choice of bases often prevents us from eating or ordering out, especially when some of those bases can be used to make comforting foods. \n\nSome of my favourite quick meals using condensed bases:\n\n- Ramen and other soups (using stock or French/onion bases)\n- Pastas (using red sauce/meatballs, or beef/mushroom/onion base with a tin of tomatoes)\n- Cottage and minced pies (using beef/mushroom/onion base, with frozen veg, and mashed potatoes)\n- Tacos or taco salad (using chipotle taco beef, or frozen carnitas)\n- Burritos, which freeze well themselves (using frozen chilli, and chipotle taco beef)\n- Curries, which also freeze well (using frozen curry gravy)\n\nLazy meals are some of my favourite, and I get a lot of satisfaction from winning the fridge. I grew up in a household that needed to be frugal, which led me to appreciate good, home cooked meals with a desire to reduce wasted food.\n\n\n\n\n\n\n\n","tags":[],"paid":false,"full_post_url":"","views":161,"likes":0,"collection":{"alias":"food-warpedvisions-org","title":"food.warpedvisions.org","description":"Recipes and thoughts about food.","style_sheet":"","public":false,"views":1310,"domain":"food.warpedvisions.org","url":"https://food.warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"eujwj6y1hlc5mm4y","slug":"introducing-the-food-log","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2022-02-15T18:38:28Z","updated":"2022-02-15T18:38:27Z","title":"🍲 Introducing the food log","body":"I love food. I love the eating of, shopping for, designing menus around, and above all else, preparation of meals, especially for those closest to me. Cookery is a universe of systemizing the making of food, and to me at least it is a lot like software design and development.\n\nIn the art of making food there are tactical skills that are important and enjoyable to hone. There are strategic planning and execution skills that take years to master. Cookery even has a holistic way of thinking about how food and food production works that feels a lot like ontology and architecture. The universe of cookery has the equivalent of principles and ideals, and a wide variety of ways to approach it that draws from a rich lineage of implicit chemistry, human history, and social structure. In short, many things about food fascinates me.\n\nWarpedVisions has always been a personal blog following my weird and sometimes interesting makery. I avoided talking about my non-tech projects for many years, somehow thinking that it wouldn't reflect well professionally. It was a wrong-headed way of thinking, as feeding the muse (literally in this case) is a great way to think about how things relate, how they work well, which starts to look like an abstract version of how we noodle around with design. In this case, it's the design of edible things.","tags":[],"paid":false,"full_post_url":"","views":288,"likes":0,"collection":{"alias":"food-warpedvisions-org","title":"food.warpedvisions.org","description":"Recipes and thoughts about food.","style_sheet":"","public":false,"views":1310,"domain":"food.warpedvisions.org","url":"https://food.warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"u8cawkoqf4a6nqk9","slug":"sweet-chunky-salad-dressing","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2021-03-19T00:56:30Z","updated":"2022-02-15T03:41:18Z","title":"🥗 Sweet chunky salad dressing","body":"This is a hacky fridge-magnet recipe to use up some old herbs and sour cream. We had it this week tossed with a chunky combination of sliced cabbage, cherry tomatoes, and diced broccoli, carrots, and celery.\n\n- 2 tablespoons Hellmann’s mayonnaise\n- 2 tablespoons sour cream\n- 2 tablespoons (to taste) cider vinegar (Braggs is good)\n- 2 tablespoons white sugar\n- 1-2 tablespoons finely diced fresh thyme leaves\n- 1 teaspoons ground coriander\n- 1-2 teaspoons MSG (Accent in this case)\n- Salt/pepper to taste\n\nCombine ingredients in a small bowl and stir or whisk together. Season to taste, but should balance sweet/acid/salt in a pleasing way. Best if rested for a few hours.\n\n#dressings","tags":["dressings"],"categories":[{"hashtag":"dressings","slug":"dressings","title":"dressings","post_count":0}],"paid":false,"full_post_url":"","views":161,"likes":0,"collection":{"alias":"food-warpedvisions-org","title":"food.warpedvisions.org","description":"Recipes and thoughts about food.","style_sheet":"","public":false,"views":1310,"domain":"food.warpedvisions.org","url":"https://food.warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"2ktvu9go0u565iz5","slug":"comfort-food-sundays-thai-inspired-noodle-soup","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2021-03-08T02:04:40Z","updated":"2022-02-15T03:41:34Z","title":"🍜 Comfort food Sundays: Thai inspired noodle soup","body":"Today’s dinner was inspired by a social media photo from my morning feed. Today I'm working with ingredients I have on hand, which includes lemongrass, pork sirloin tip, and a boatload of veg.\n\n## Pork and mushrooms\n\n* 500-750g of pork sirloin, thinly sliced and halved (3-4mm x 2cm x 2cm or so)\n* 2-3 cups of mushrooms, sliced (shiitakes in this case)\n* 3-4 stalks of lemongrass super finely sliced (on the bias)\n* 1-2 tablespoons cane sugar (or any sugar you have)\n* garlic, shallots finely minced\n* 2 tablespoons soy sauce, mirin, rice wine (wine vinegar, or lime can sub)\n* 1 tablespoons fish sauce\n* 1-2 tablespoons corn starch\n* 1 teaspoon Accent (MSG)\n* 1 teaspoon baking soda\n* salt/pepper to taste\n\nToss pork and mushrooms with ingredients and set aside in the fridge to marinate for up to a few hours.\n\nNote that the same basic recipe works quite well with tofu too, just treat it like the pork (and omit the fish sauce).\n\nFry the mixture in a non-stick pan on medium, stirring or flipping regularly. You’re looking for a good browning, but try to keep the meat at rare. Set aside and add to the soup to finish cooking through.\n\n## Soup base\n\n* 1-2 cups of onion thinly sliced\n* 1 cup of celery thinly sliced (on the bias as it looks cool)\n* 4 cups of broccoli, in bite size chunks\n* 2-3 cups of mild and medium peppers, thinly sliced (on the bias)\n* 1 can coconut milk\n* 2-3 tbsp curry paste (whatever you have on hand)\n* 500ml partially condensed stock (unsalted and homemade is best, adjust carefully if store bought)\n* 1 pack of noodles, par cooked in boiling water if needed\n\nStart the soup base in a large 5-6L (or quart) saucier on medium heat, with some coconut oil (or the solids from the coconut milk if you bought the good stuff). Add the curry paste and stir, cooking until aromatic.\n\nAdd onions and celery and heat until things start sticking. Deglaze with remaining coconut milk, add stock, and scrape any fun bits off the bottom of the pan. Add remaining veg, and simmer until veg is almost soft enough to eat.\n\nAdd the noodles and pork mixture, and continue simmering. Season to taste and serve in large bowls.\n\n#soups","tags":["soups"],"categories":[{"hashtag":"soups","slug":"soups","title":"soups","post_count":0}],"paid":false,"full_post_url":"","views":280,"likes":0,"collection":{"alias":"food-warpedvisions-org","title":"food.warpedvisions.org","description":"Recipes and thoughts about food.","style_sheet":"","public":false,"views":1310,"domain":"food.warpedvisions.org","url":"https://food.warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"7ido37bja6m3ci5j","slug":"saturday-cravings-stir-fry-two-ways","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2021-03-06T18:30:03Z","updated":"2022-02-15T18:30:48Z","title":"🍲 Saturday cravings: stir fry two ways","body":"Today we were craving stir fry so I decided to practice the basic method two ways: lemongrass pork and sweet ginger/garlic pork. We had a sirloin tip pork roast on hand, which is best cooked using a fast method as it’s lean and tender. This method doesn’t include deep frying the pork, so is much lighter than standard take out.\n\n## Lemongrass pork\n\n- 500g pork, silverskin removed, cubed\n- 5-6 stalks of washed lemongrass, very thinly sliced on the bias \n- half a head of garlic crushed and sliced\n- 1 shallot finely sliced\n- 1 teaspoon baking soda\n- 1-2 tablespoons corn starch\n- 1 tbsp soy sauce, mirin, and rice wine (or rice wine vinegar, or lime juice)\nsalt/pepper to taste\n- 1 cup of green onion, sliced on the bias (in largish chunks)\n- 3-4 cups of veg (onion, celery, peppers, cut on the bias in largish bite size pieces)\n\nNote: this also works well with tofu (press dry, otherwise treat the same).\n\nCube the pork, salt and pepper, and marinate in the liquid, garlic, shallots, and a small amount of the lemongrass. Toss in baking soda and corn starch and refrigerate for for 30-60 minutes.\n\nAdd the remaining lemongrass and some oil to a wide pan on medium-low and cook until browning. Add pork and continue cooking until the pork starts to brown. Add veg, bump up the heat to medium, and flip regularly until veg is browning and pork is cooked through.\n\n## Garlic/ginger pork\n\n- 500g pork, silverskin removed, julienned (5mm x 5mm x 3-4cm)\n- half a head of garlic crushed and sliced\n- 1 shallot finely sliced\n- 1 knob of ginger finely sliced (or grated, as I’m lazy)\n- 1 teaspoon baking soda\n- 1-2 tablespoons corn starch\n- 1 tablespoon sugar\n- 1 tablespoons soy sauce, mirin, and rice wine (or rice wine vinegar, or lime juice)\n- salt/pepper to taste\n- 1-2 tsp of white pepper (a classic flavour with ginger/garlic)\n- 1 cup of green onion, sliced on the bias (in largish chunks)\n- 3-4 cups of veg (onion, celery, peppers, cut on the bias in largish bite size pieces)\n\nThinly julienne the pork and marinate in the garlic, shallot, ginger, salt/pepper/sugar, and liquids. Set aside in the fridge for 30-60 minutes.\n\nAdd the pork to a wide pan on medium and fry until the edges start to brown. Add onion and celery, and continue cooking. Add remaining veg and flip regularly.\n\nDeglaze the pan with water and rice wine vinegar. Cook until liquids reduce (and add more liquid if too thick.\n\nThese dishes are great over rice. Today we had a brown basmati rice with chicken stock, sunflower seeds, and 5 spice.\n\n#stirfry","tags":["stirfry"],"categories":[{"hashtag":"stirfry","slug":"stirfry","title":"stirfry","post_count":0}],"paid":false,"full_post_url":"","views":279,"likes":0,"collection":{"alias":"food-warpedvisions-org","title":"food.warpedvisions.org","description":"Recipes and thoughts about food.","style_sheet":"","public":false,"views":1310,"domain":"food.warpedvisions.org","url":"https://food.warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"jdkmv0htel334wgb","slug":"bruces-no-knead-pizza-dough","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2020-05-01T22:15:51Z","updated":"2022-02-17T23:16:03Z","title":"Bruce's no-knead pizza dough","body":"Adapted from my traditional and very knead-y pizza dough, which we discovered by accident that one time when we somehow left it in a cupboard for a few days. It turns out [we weren't the first ones to figure this out](https://www.seriouseats.com/recipes/2012/03/jim-laheys-no-knead-pizza-dough-recipe.html), and it's a fantastic way of making doughs in general. Many recipes use weights for ingredients \\... this one does not. It is a super lazy dough that can take as little as 10 minutes if you work at it. It also produces one of the nicest pizza and focaccia doughs I've ever made.\n\n## Ingredients\n\n- 6-7 cups of flour, ideally 00 pizza flour, bread flour, or AP flour (in order of bestness)\n- 3 cups (750ml) of warm tap water\n- 2 tsp (10ml) instant yeast\n- 3 tsp (15ml) salt\n\n## Optional ingredients\n\n- 2 tbsp (30ml) olive oil\n- 2 tbsp sugar (home style pizzas usually have a sweeter crust, and it helps with browning at lower temps)\n\n## Directions\n\n1. Add 3 cups of flour, yeast, and salt to 3 cups of warm water in a large bowl. Mix until combined with a whisk or other farm implement.\n2. Add ½ a cup of flour at a time, stirring with a spoon or spatula until combined. Repeat this until a very wet, sticky ball forms.\n3. Grease a large container with 1 tsp olive oil, form a ball with the dough. Hide this in your fridge for 24, 48, or up to 72 hours. Truth is that 2x that can work, with an extra prove stage.\n4. Once fridge proved-slash-fermented, remove from the fridge and let come to room temperature.\n5. On a floured surface, split the dough into 2-6 portions depending on your pans.\n6. Fold each chunk of dough over itself 3-6 times and form into taut balls, adding a small amount of flour if sticky. Let these balls rise until doubled (45 minutes or so).\n\nOnce the dough is doubled in size, you can start forming pizzas. There are many methods that work here, including a rolling pin, wine bottle, or hand stretching over your knuckles. All of these methods work, though if you feel like the dough has deflated let it rise until it springs back.\n\n## Baking\n\nPreheat your oven at 190C (if you like a lot of toppings) or 230C if you are aiming at a thinner crust.\n\n1. Decorate the dough with sauce, cheese, and toppings in any way you like.\n2. Add corn meal to a pan lined with parchment. Bake until browned. This will be different depending on your oven, toppings, and rack placement.\n\n### On how to figure out if you have enough flour in step #2\n\nIt's easy to say \"until a wet, sticky ball forms\", but what does that mean? Mostly I add flour until I can start folding the dough over on itself, using the spatula to lift it up and over the dough. At this point I start adding flour a few tablespoons at a time, folding over a bit until it's just starting to hold its shape. At the \"just holding it's shape\", dough is pretty much at max hydration and would be a pain to work with. This is where you start fermenting it, and we'll add a bit more flour when balling up the dough.\n\n#Food log #Weblog\n","tags":["Food","Weblog"],"categories":[{"hashtag":"Food","slug":"food","title":"food","post_count":0},{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0}],"paid":false,"full_post_url":"","views":280,"likes":0,"collection":{"alias":"food-warpedvisions-org","title":"food.warpedvisions.org","description":"Recipes and thoughts about food.","style_sheet":"","public":false,"views":1310,"domain":"food.warpedvisions.org","url":"https://food.warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"uj7szwb6l5g2w6wt","slug":"a-very-approximate-version-of-bruces-pizza-sauce","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2020-04-30T22:10:57Z","updated":"2022-02-17T23:11:14Z","title":"A very approximate version of Bruce's pizza sauce","body":"There are a few ways to make pizza sauce, depending on how lazy you are. Our favourite sauce is cooked down from good tomatoes for a moderate amount of time, and my fastest sauce comes from a tin of crushed tomatoes or sauce (thickened with paste). For pizza sauce, better tomatoes make a difference, as cheaper ones are less sweet and flavourful. This is loosely based on [Serious Eat's New York Style pizza sauce](https://www.seriouseats.com/recipes/2010/10/new-york-style-pizza-sauce.html), and one I've made for more than 20 years now.\n\n## Main ingredients\n\n- 1 (820ml/28oz) tin of San Marzano tomatoes\n- 1-2 tbsp of tomato paste (to add some punch + thicken things up faster)\n- 2-3 cloves of garlic, finely minced\n- 1 small yellow onion (and/or shallot)\n- 1-2 tsp of dried oregano\n- Salt and pepper to taste\n- Olive oil\n- (Bonus) 1-2 tbsp unsalted butter\n\n## Alternative ingredients\n\n- 1 jar (or medium tin) of crushed tomatoes or\n- 1 jar (or tin) of tomato sauce and 1 tbsp of tomato paste\n- 1-2 tbsp balsamic vinegar, honey, or sugar (depending on how bland your tomatoes are)\n\nI don't add chilis or paprika anymore, leaving these spices for toppings instead. Paprika, especially smoked paprika can make a sauce taste heavy (muddling the fine and sweet notes of the tomatoes).\n\n## Directions\n\n1.  Dice onions, garlic, and shallot and set aside.\n2. Optional: crush tomatoes by hand or with a pastry cutter (or with a hand blender). Even more optionally, process the tomatoes in a food mill or by forcing through a fine mesh strainer with a spatula.\n3. Sweat the onion, garlic, and herbs in 2-3 tbsp of olive oil until aromatic (but not browned) for something like 2-3 minutes. Reduce heat and add tomatoes and oregano.\n4. Salt and pepper to taste. I always do this 2-3 times (tasting between), so that I don't oversalt.\n5. Simmer at the lowest heat that will just barely bubble for 20-30 minutes. You can go longer, but not much shorter than 20 minutes. Tinned tomatoes mellow out nicely only after some simmering (otherwise can taste a bit \"tinny\" or harsh).\n\nIf you find the sauce tastes a bit bitter:\n\n- Filter it through a fine mesh strainer (removing seeds),\n- Add some balsamic, honey, or sugar (or some of all 3)\n- Add a bit more salt\n\n#Food log #Weblog\n","tags":["Food","Weblog"],"categories":[{"hashtag":"Food","slug":"food","title":"food","post_count":0},{"hashtag":"Weblog","slug":"weblog","title":"weblog","post_count":0}],"paid":false,"full_post_url":"","views":287,"likes":0,"collection":{"alias":"food-warpedvisions-org","title":"food.warpedvisions.org","description":"Recipes and thoughts about food.","style_sheet":"","public":false,"views":1310,"domain":"food.warpedvisions.org","url":"https://food.warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}},{"id":"0bzjnb218kv82xl1","slug":"quick-relish","appearance":"norm","language":"en","rtl":false,"type":"post","created":"2020-03-13T00:41:28Z","updated":"2022-02-15T18:23:51Z","title":"Quick relish","body":"Today I wanted a relish for a dish so I made some:\n\n- ½ cup of chopped, sweet pickles\n- ½ cup of chopped, pickled peppers (mild - medium)\n- ½ cup frozen corn, diced, and fried (until edges are brown and crispy)\n- ¼ cup diced onions (purple is what I had on hand)\n- ½ cup of mustard\n- 2 tbsp ketchup\n- 1 tbsp freeze dried dill (if it’s out of seasons)\n- Salt, pepper to taste\n\nCombine, adjust seasoning, and rest in the refrigerator for a few hours.\n\n#condiments","tags":["condiments"],"categories":[{"hashtag":"condiments","slug":"condiments","title":"condiments","post_count":0}],"paid":false,"full_post_url":"","views":147,"likes":0,"collection":{"alias":"food-warpedvisions-org","title":"food.warpedvisions.org","description":"Recipes and thoughts about food.","style_sheet":"","public":false,"views":1310,"domain":"food.warpedvisions.org","url":"https://food.warpedvisions.org/","monetization_pointer":"","verification_link":"","total_posts":0}}]}],"posts":[]}